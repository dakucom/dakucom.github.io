<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dakuzai’s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dakuzai.ml/"/>
  <updated>2020-07-31T10:36:07.006Z</updated>
  <id>https://dakuzai.ml/</id>
  
  <author>
    <name>minghui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis-Plus常用策略</title>
    <link href="https://dakuzai.ml/2020/04/05/MyBatis-Plus%E5%B8%B8%E7%94%A8%E7%AD%96%E7%95%A5/"/>
    <id>https://dakuzai.ml/2020/04/05/MyBatis-Plus%E5%B8%B8%E7%94%A8%E7%AD%96%E7%95%A5/</id>
    <published>2020-04-05T15:55:38.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="插入策略"><a href="#插入策略" class="headerlink" title="插入策略"></a>插入策略</h1><p>@TableId</p><h1 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a>更新策略</h1><p>@TableField</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="MyBatis-Plus" scheme="https://dakuzai.ml/categories/MyBatis-Plus/"/>
    
    
      <category term="MyBatis-Plus" scheme="https://dakuzai.ml/tags/MyBatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus初体验</title>
    <link href="https://dakuzai.ml/2020/04/05/MyBatis-Plus%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://dakuzai.ml/2020/04/05/MyBatis-Plus%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2020-04-05T12:45:13.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a><a href="https://mp.baomidou.com/" target="_blank" rel="noopener">官网</a></h2><h2 id="MyBatis-Plus（简称-MP）是一个-MyBatis-的增强工具，在-MyBatis-的基础上只做增强不做改变，为简化开发、提高效率而生。"><a href="#MyBatis-Plus（简称-MP）是一个-MyBatis-的增强工具，在-MyBatis-的基础上只做增强不做改变，为简化开发、提高效率而生。" class="headerlink" title="MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。"></a>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</h2><h1 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h1><p>我们的愿景是成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。<br><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gdt7mrgvpij30sg0a1n0a.jpg" data-fancybox="group" data-caption="MyBatis-Plus" class="fancybox"><img alt="MyBatis-Plus" title="MyBatis-Plus" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gdt7mrgvpij30sg0a1n0a.jpg" class="lazyload"></a></p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会<code>自动注入基本 CURD，性能基本无损耗</code>，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong><code>内置代码生成器（pojo、dao、xml、service、.....）</code></strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong><code>内置性能分析插件</code></strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作<h1 id="支持数据库"><a href="#支持数据库" class="headerlink" title="支持数据库"></a>支持数据库</h1></li></ol><ul><li>mysql 、 mariadb 、 oracle 、 db2 、 h2 、 hsql 、 sqlite 、 postgresql 、 sqlserver</li><li>达梦数据库 、 虚谷数据库 、 人大金仓数据库<h1 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h1><a href="https://tva2.sinaimg.cn/large/005DJQmOgy1gdt84iidw4j310y0no7j6.jpg" data-fancybox="group" data-caption="MyBatis-Plus" class="fancybox"><img alt="MyBatis-Plus" title="MyBatis-Plus" data-src="https://tva2.sinaimg.cn/large/005DJQmOgy1gdt84iidw4j310y0no7j6.jpg" class="lazyload"></a><h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><h2 id="建立数据库，导入数据-可以自己建立，我这里参考官网"><a href="#建立数据库，导入数据-可以自己建立，我这里参考官网" class="headerlink" title="建立数据库，导入数据(可以自己建立，我这里参考官网)"></a>建立数据库，导入数据(可以自己建立，我这里参考官网)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">id BIGINT(20) NOT NULL COMMENT <span class="string">'主键ID'</span>,</span><br><span class="line">name VARCHAR(30) NULL DEFAULT NULL COMMENT <span class="string">'姓名'</span>,</span><br><span class="line">age INT(11) NULL DEFAULT NULL COMMENT <span class="string">'年龄'</span>,</span><br><span class="line">email VARCHAR(50) NULL DEFAULT NULL COMMENT <span class="string">'邮箱'</span>,</span><br><span class="line">PRIMARY KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DELETE FROM user;</span><br><span class="line"></span><br><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, <span class="string">'Jone'</span>, 18, <span class="string">'test1@baomidou.com'</span>),</span><br><span class="line">(2, <span class="string">'Jack'</span>, 20, <span class="string">'test2@baomidou.com'</span>),</span><br><span class="line">(3, <span class="string">'Tom'</span>, 28, <span class="string">'test3@baomidou.com'</span>),</span><br><span class="line">(4, <span class="string">'Sandy'</span>, 21, <span class="string">'test4@baomidou.com'</span>),</span><br><span class="line">(5, <span class="string">'Billie'</span>, 24, <span class="string">'test5@baomidou.com'</span>);</span><br></pre></td></tr></table></figure></div><h2 id="导入对应的依赖"><a href="#导入对应的依赖" class="headerlink" title="导入对应的依赖"></a>导入对应的依赖</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mp依赖   就不需要导入mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring2.x 默认MySQL8驱动配置  8.0以上需要配置时区--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--IDEA中安装Lombok插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="编写项目"><a href="#编写项目" class="headerlink" title="编写项目"></a>编写项目</h2></li><li>配置数据库连接<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># DataSource Config</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br></pre></td></tr></table></figure></div></li><li>编写实体类<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>编写接口继承BaseMapper 即可！至此所有的CRUD 都已经完成了！<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>所有的操作，BaseMapper 都已经帮我们封装好了，我们拿来即用！<br><a href="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdt8evodwnj30xw0jbawx.jpg" data-fancybox="group" data-caption="BaseMapper源码" class="fancybox"><img alt="BaseMapper源码" title="BaseMapper源码" data-src="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdt8evodwnj30xw0jbawx.jpg" class="lazyload"></a></p></blockquote><h2 id="测试使用即可！"><a href="#测试使用即可！" class="headerlink" title="测试使用即可！"></a>测试使用即可！</h2><h3 id="主启动类添加MapperScan"><a href="#主启动类添加MapperScan" class="headerlink" title="主启动类添加MapperScan"></a>主启动类添加MapperScan</h3><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gdt8h0ch0vj30s408vqac.jpg" data-fancybox="group" data-caption="主启动类添加MapperScan" class="fancybox"><img alt="主启动类添加MapperScan" title="主启动类添加MapperScan" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gdt8h0ch0vj30s408vqac.jpg" class="lazyload"></a><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3></li><li>基本测试<br><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gdt8jlp2zsj30vu0ij4ju.jpg" data-fancybox="group" data-caption="测试" class="fancybox"><img alt="测试" title="测试" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gdt8jlp2zsj30vu0ij4ju.jpg" class="lazyload"></a></li><li>查看MP怎么帮我们自动生成SQL，即开启日志功能  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 配置日志！</span><br><span class="line">mybatis-plus:</span><br><span class="line">configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure></div><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gdt8mkcupxj30w80c54cr.jpg" data-fancybox="group" data-caption="测试" class="fancybox"><img alt="测试" title="测试" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gdt8mkcupxj30w80c54cr.jpg" class="lazyload"></a><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><h2 id="简单时，MyBatis-Plus帮我们自动生成"><a href="#简单时，MyBatis-Plus帮我们自动生成" class="headerlink" title="简单时，MyBatis-Plus帮我们自动生成"></a>简单时，MyBatis-Plus帮我们自动生成</h2></li><li>基本的增删改查</li><li>乐观锁</li><li>逻辑删除</li><li>自动填充</li><li>分析性能</li><li>主键策略生成<h2 id="复杂时，编写Wapper条件构造器即可！"><a href="#复杂时，编写Wapper条件构造器即可！" class="headerlink" title="复杂时，编写Wapper条件构造器即可！"></a>复杂时，编写Wapper条件构造器即可！</h2><h2 id="所以说，70-以上的业务都可以自动实现，抛开了底层dao层，可以让我们更加专心的写controller层的逻辑。"><a href="#所以说，70-以上的业务都可以自动实现，抛开了底层dao层，可以让我们更加专心的写controller层的逻辑。" class="headerlink" title="所以说，70%以上的业务都可以自动实现，抛开了底层dao层，可以让我们更加专心的写controller层的逻辑。"></a>所以说，70%以上的业务都可以自动实现，抛开了底层dao层，可以让我们更加专心的写controller层的逻辑。</h2><h2 id="MP是让我们可以通过面向对象的方式编写SQL"><a href="#MP是让我们可以通过面向对象的方式编写SQL" class="headerlink" title="MP是让我们可以通过面向对象的方式编写SQL"></a>MP是让我们可以通过面向对象的方式编写SQL</h2></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="MyBatis-Plus" scheme="https://dakuzai.ml/categories/MyBatis-Plus/"/>
    
    
      <category term="MyBatis-Plus" scheme="https://dakuzai.ml/tags/MyBatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>走进 VUE</title>
    <link href="https://dakuzai.ml/2020/03/31/%E8%B5%B0%E8%BF%9B-VUE/"/>
    <id>https://dakuzai.ml/2020/03/31/%E8%B5%B0%E8%BF%9B-VUE/</id>
    <published>2020-03-31T22:45:42.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当前最火的前端框架，至于它为什么这么火，这就需要我们慢慢的去理解它了，走你！</p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><ul><li>VsCode（我自己使用的方式）</li><li>IDEA插件集成</li><li>python</li><li>Node<ul><li>node</li><li>npm<h1 id="VsCode"><a href="#VsCode" class="headerlink" title="VsCode"></a>VsCode</h1></li></ul></li></ul><ol><li><a href="https://code.visualstudio。com/" target="_blank" rel="noopener">官网下载软件</a></li><li>按照提示next安装即可</li><li>默认是英文，不适应的话可以安装中文插件，安装后记得重启，如图：<br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdeeit8h26j30k30hrwg9.jpg" data-fancybox="group" data-caption="安装中文插件" class="fancybox"><img alt="安装中文插件" title="安装中文插件" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdeeit8h26j30k30hrwg9.jpg" class="lazyload"></a></li><li>下载需要的基本插件，如图：<br><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gdeelxzhdnj30oq0jcwft.jpg" data-fancybox="group" data-caption="基本插件" class="fancybox"><img alt="基本插件" title="基本插件" data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gdeelxzhdnj30oq0jcwft.jpg" class="lazyload"></a><h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1></li></ol><ul><li><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">官网下载</a></p></li><li><p>什么是Node.js(前端运行时环境)：<br>  是一个基于 Chrome V8 引擎的 JavaScript 运行环境,说白了就是运行在服务端的JavaScript;可以这么说，NodeJS 带来了全栈时代。</p></li><li><p>需要安装python环境（最好安装python2，因为python2和python3有很大区别）</p><h1 id="NPM包管理"><a href="#NPM包管理" class="headerlink" title="NPM包管理"></a>NPM包管理</h1></li><li><p>我们安装nodejs的时候，就有了 npm 的环境！</p><blockquote><p>C:\Users\Administrator&gt;npm -v 6.13.4</p></blockquote><h2 id="什么是-npm"><a href="#什么是-npm" class="headerlink" title="什么是 npm"></a>什么是 npm</h2><p>  NPM的全称是Node Package Manager，是一个NodeJS包管理和分发工具，已经成为了非官方的发布<br>  Node模块（包）的标准。就好比maven，所有东西只要到导入依赖即可，npm 也是如此，npm<br>install，好比Linux 的 yum 安装！</p><h2 id="配置淘宝镜像"><a href="#配置淘宝镜像" class="headerlink" title="配置淘宝镜像"></a>配置淘宝镜像</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></div><h2 id="查看npm的配置信息"><a href="#查看npm的配置信息" class="headerlink" title="查看npm的配置信息"></a>查看npm的配置信息</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure></div><p><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gdhujtxfgmj30qi098t8t.jpg" data-fancybox="group" data-caption="npm" class="fancybox"><img alt="npm" title="npm" data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gdhujtxfgmj30qi098t8t.jpg" class="lazyload"></a></p><h2 id="下载依赖包"><a href="#下载依赖包" class="headerlink" title="下载依赖包"></a>下载依赖包</h2></li></ul><ol><li>npm install vue 安装指定依赖，默认是最新版本</li><li>npm install <a href="mailto:vue@x.x.x">vue@x.x.x</a> 指定版本安装！</li><li>package.json 中管理了所有依赖版本控制，就如同 pom.xml</li><li>指定只在开发的时候使用 <code>npm install --save-dev (等价-D) eslint</code><br><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gdhvh5fzg4j30le0k8t99.jpg" data-fancybox="group" data-caption="npm" class="fancybox"><img alt="npm" title="npm" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gdhvh5fzg4j30le0k8t99.jpg" class="lazyload"></a></li><li>全局安装环境安装！ -g <code>npm install -g webpack</code>,默认安装在npm的根目录中<br><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gdhvkan8a7j30uu05gwek.jpg" data-fancybox="group" data-caption="npm" class="fancybox"><img alt="npm" title="npm" data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gdhvkan8a7j30uu05gwek.jpg" class="lazyload"></a></li><li>其他命令<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update jquery  <span class="comment"># 更新包</span></span><br><span class="line">npm uninstall jquery  <span class="comment"># 卸载包！</span></span><br></pre></td></tr></table></figure></div><h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1>Babel 是一个广泛的转码器！可以将 ES6代码转换为 ES5的代码！ 语法会自动转换！<h2 id="安装-Babel"><a href="#安装-Babel" class="headerlink" title="安装 Babel"></a>安装 Babel</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g babel-cli <span class="comment"># 安装babel-cli</span></span><br><span class="line">babel --version <span class="comment"># 版本测试</span></span><br><span class="line">6.26.0 (babel-core 6.26.3)</span><br></pre></td></tr></table></figure></div><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdhuu9ka8xj30fp04qq2q.jpg" data-fancybox="group" data-caption="babel" class="fancybox"><img alt="babel" title="babel" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdhuu9ka8xj30fp04qq2q.jpg" class="lazyload"></a><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2></li><li>在 src 在编写js源代码</li><li>编写.babelrc 配置文件<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"presets"</span>: [</span><br><span class="line">  <span class="string">"es2015"</span></span><br><span class="line">],</span><br><span class="line"> <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>安装babel依赖<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D babel-preset-es2015</span><br></pre></td></tr></table></figure></div></li><li>输出测试(自动从es6降到es5)</li></ol><ul><li>手动输出<br><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gdhwajoldbj311a0j5jsy.jpg" data-fancybox="group" data-caption="babel" class="fancybox"><img alt="babel" title="babel" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gdhwajoldbj311a0j5jsy.jpg" class="lazyload"></a><br><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gdhwdkd7q0j30nn0ao3yp.jpg" data-fancybox="group" data-caption="babel" class="fancybox"><img alt="babel" title="babel" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gdhwdkd7q0j30nn0ao3yp.jpg" class="lazyload"></a></li><li>脚本输出（scripts）<br><a href="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdhwnymx2hj30rg0dxwf6.jpg" data-fancybox="group" data-caption="图片" class="fancybox"><img alt="图片" title="图片" data-src="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdhwnymx2hj30rg0dxwf6.jpg" class="lazyload"></a><h1 id="VUE开发时使用ES6语法"><a href="#VUE开发时使用ES6语法" class="headerlink" title="VUE开发时使用ES6语法"></a>VUE开发时使用<strong><em>ES6语法</em></strong></h1>其实就是一个规范而已！ JavaScript的下一代标准！ES6 = ES2015 = ECMAScript6！</li></ul><ol><li>let 声明变量！<ul><li>var与let的区别<ul><li>与var不同，var声明变量是能够全局使用的，而let声明的变量为<strong>私有变量</strong>，是<strong>局部</strong>的;<br><a href="https://tva2.sinaimg.cn/large/005DJQmOgy1gdggvi5e5uj30kz0i9jru.jpg" data-fancybox="group" data-caption="let有作用域" class="fancybox"><img alt="let有作用域" title="let有作用域" data-src="https://tva2.sinaimg.cn/large/005DJQmOgy1gdggvi5e5uj30kz0i9jru.jpg" class="lazyload"></a></li><li>var可以声明多次，但let 变量<strong>不能重复声明</strong>，不然会报错。<br><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gdgh3038pyj30ik0dxt92.jpg" data-fancybox="group" data-caption="let变量不能重复声明" class="fancybox"><img alt="let变量不能重复声明" title="let变量不能重复声明" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gdgh3038pyj30ik0dxt92.jpg" class="lazyload"></a></li><li>var声明的对象会提升对象的作用域，而let声明的对象不会。<br><a href="https://tva2.sinaimg.cn/large/005DJQmOgy1gdgh8bg19qj30ha0eowev.jpg" data-fancybox="group" data-caption="let声明的对象不会提升作用域" class="fancybox"><img alt="let声明的对象不会提升作用域" title="let声明的对象不会提升作用域" data-src="https://tva2.sinaimg.cn/large/005DJQmOgy1gdgh8bg19qj30ha0eowev.jpg" class="lazyload"></a></li></ul></li></ul></li><li>常量变化<br>一旦使用const声明了常量，这个常量就不允许再改变了，且声明时必须同时赋值。<br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdhs0sq1zuj30kg0h074o.jpg" data-fancybox="group" data-caption="const" class="fancybox"><img alt="const" title="const" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdhs0sq1zuj30kg0h074o.jpg" class="lazyload"></a><br><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdhs3e92rlj30nt0k5gm5.jpg" data-fancybox="group" data-caption="const" class="fancybox"><img alt="const" title="const" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdhs3e92rlj30nt0k5gm5.jpg" class="lazyload"></a></li><li>解构赋值，ES6更加优雅的赋值方式<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传统赋值</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'传统赋值：'</span>, a, b, c)</span><br><span class="line"><span class="comment">//解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [x, y, z] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'解构赋值：'</span>,x, y, z)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义用户对象</span></span><br><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">'dakuzai'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统对象赋值</span></span><br><span class="line"><span class="keyword">let</span> name1 = user.name</span><br><span class="line"><span class="keyword">let</span> age1 = user.age</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'传统对象赋值：'</span>, name1, age1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//解构对象赋值,变量必须与对象属性同名</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = user</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'解构对象赋值：'</span>, name, age)</span><br></pre></td></tr></table></figure></div><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdhsovbx0bj30j30fjq3p.jpg" data-fancybox="group" data-caption="const" class="fancybox"><img alt="const" title="const" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdhsovbx0bj30j30fjq3p.jpg" class="lazyload"></a></li><li>模板字符串<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'dakuzai'</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="comment">// 拼接字符串</span></span><br><span class="line"><span class="comment">// 传统的，大家的习惯！ </span></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">'name:'</span> + name + <span class="string">'age:'</span> + age; </span><br><span class="line"><span class="built_in">console</span>.log(message)</span><br><span class="line"><span class="comment">//模板字符串拼接  $&#123;&#125;</span></span><br><span class="line"><span class="comment">// es6模板字符串拼接,字符串引号需要改为: ` `</span></span><br><span class="line"><span class="keyword">let</span> es6message = <span class="string">`name: <span class="subst">$&#123;name&#125;</span> age:<span class="subst">$&#123;age&#125;</span>`</span> </span><br><span class="line"><span class="built_in">console</span>.log(es6message)</span><br></pre></td></tr></table></figure></div><a href="https://tva2.sinaimg.cn/large/005DJQmOgy1gdhsr2msv7j30e70faweu.jpg" data-fancybox="group" data-caption="const" class="fancybox"><img alt="const" title="const" data-src="https://tva2.sinaimg.cn/large/005DJQmOgy1gdhsr2msv7j30e70faweu.jpg" class="lazyload"></a></li></ol><ul><li>对象声明简写(const)<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传统对象声明</span></span><br><span class="line"><span class="keyword">let</span> name1 = <span class="string">'dakuzai'</span></span><br><span class="line"><span class="keyword">let</span> age1 = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: name1, <span class="attr">age</span>: age1 &#125;</span><br><span class="line"><span class="built_in">console</span>.log(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6简写(语法糖) 对象属性名会被定义成与变量名相同</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'dakuzai'</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> user = &#123; name, age &#125;</span><br><span class="line"><span class="built_in">console</span>.log(user)</span><br></pre></td></tr></table></figure></div><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdhst0lbj7j30gt0f074p.jpg" data-fancybox="group" data-caption="const" class="fancybox"><img alt="const" title="const" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdhst0lbj7j30gt0f074p.jpg" class="lazyload"></a></li><li>定义方法简写<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"> <span class="comment">// 传统方法</span></span><br><span class="line"> sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"这是传统方法定义"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">person.sayHi();</span><br><span class="line"><span class="comment">// ES6方法</span></span><br><span class="line"><span class="keyword">const</span> ES6person = &#123;</span><br><span class="line"> sayHi() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'这是ES6方法简写'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ES6person.sayHi();</span><br></pre></td></tr></table></figure></div><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gdht1up4jmj30mi0fdgm3.jpg" data-fancybox="group" data-caption="const" class="fancybox"><img alt="const" title="const" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gdht1up4jmj30mi0fdgm3.jpg" class="lazyload"></a></li><li>对象拓展运算符<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">'dakzuai'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="comment">//复制引用</span></span><br><span class="line"><span class="keyword">let</span> personCopyReference = person</span><br><span class="line"><span class="comment">//修改名称</span></span><br><span class="line">personCopyReference.name = <span class="string">'peng'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'复制引用后的新对象'</span>, personCopyReference.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象深度拷贝  ...是拓展运算符</span></span><br><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>: <span class="string">'dakzuai'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">let</span> userCopyProperty = &#123; ...user &#125;</span><br><span class="line"><span class="comment">//修改名称</span></span><br><span class="line">userCopyProperty.name = <span class="string">'666'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'原对象'</span>, user.name)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'深度拷贝后的新对象'</span>, userCopyProperty.name)</span><br></pre></td></tr></table></figure></div><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gdhtdkdwpcj30ie0h0jrz.jpg" data-fancybox="group" data-caption="const" class="fancybox"><img alt="const" title="const" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gdhtdkdwpcj30ie0h0jrz.jpg" class="lazyload"></a></li><li>默认的参数<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">name, age = <span class="number">18</span></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(name + <span class="string">','</span> + age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">showInfo(<span class="string">'dakuzai'</span>, <span class="number">18</span>)</span><br><span class="line">showInfo(<span class="string">'dakuzai'</span>)<span class="comment">//走默认</span></span><br><span class="line">showInfo(<span class="string">'dakuzai'</span>, <span class="literal">undefined</span>)<span class="comment">//走默认</span></span><br><span class="line">showInfo(<span class="string">'dakuzai'</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure></div><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gdhteqkrupj30lm0e8mxf.jpg" data-fancybox="group" data-caption="const" class="fancybox"><img alt="const" title="const" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gdhteqkrupj30lm0e8mxf.jpg" class="lazyload"></a></li><li>箭头函数(参数 =&gt; 函数体),类似Lombda表达式<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'传统匿名函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'es6箭头函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function">(<span class="params">str</span>) =&gt;</span> <span class="built_in">console</span>.log(str)</span><br><span class="line">f2()</span><br><span class="line">f3(<span class="string">'如果只有一行代码，可省略&#123;&#125;'</span>)</span><br></pre></td></tr></table></figure></div><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gdhtflrjf2j30ma0dymxh.jpg" data-fancybox="group" data-caption="cosnt" class="fancybox"><img alt="cosnt" title="cosnt" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gdhtflrjf2j30ma0dymxh.jpg" class="lazyload"></a></li><li>小结：<br>未来，前端代码的底层大量可以看见这些代码，尤其是对接后端接口api。es6是一个非常人性化的语法，非常优雅，和后端开发接近。<h1 id="模块化（import）"><a href="#模块化（import）" class="headerlink" title="模块化（import）"></a>模块化（import）</h1>面向对象<h2 id="模块化规范："><a href="#模块化规范：" class="headerlink" title="模块化规范："></a>模块化规范：</h2></li></ul><ol><li>CommonJS 规范<ul><li>新建一个js文件  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sub = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mul = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> di = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> a / b</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 导出这些方法供他人使用！</span></span><br><span class="line">    <span class="comment">// module.exports = &#123;</span></span><br><span class="line">    <span class="comment">//  sum: sum,</span></span><br><span class="line">    <span class="comment">//  sub: sub,</span></span><br><span class="line">    <span class="comment">//  mul: mul,</span></span><br><span class="line">    <span class="comment">//  di: di,</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 如果名称相同，可以简写</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     sum,</span><br><span class="line">     sub,</span><br><span class="line">     mul,</span><br><span class="line">     di</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>新建一个js文件，测试导入  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">'./xxx.js'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"><span class="comment">// 测试方法，正常输出</span></span><br><span class="line"><span class="keyword">const</span> r1 = m.sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> r2 = m.sub(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(r1)</span><br><span class="line"><span class="built_in">console</span>.log(r2)</span><br></pre></td></tr></table></figure></div></li></ul></li><li>ES6模块化规范</li></ol><ul><li>第一种写法<ul><li>新建一个userApi.js文件  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'获取用户列表'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'保存用户信息'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>新建一个测试的js文件  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import node不支持 需要用babel转义</span></span><br><span class="line"><span class="keyword">import</span> &#123; getList, save &#125; <span class="keyword">from</span> <span class="string">'./userApi.js'</span></span><br><span class="line">getList()</span><br><span class="line">save()</span><br></pre></td></tr></table></figure></div></li></ul></li><li>第二种写法<ul><li>新建一个js文件  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> getList() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"获取数据列表"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"> save() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"保存用户"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>新建一个测试的js文件  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./userApi2.js'</span></span><br><span class="line">user.getList()</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure></div><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3>记住一个点，node 不支持 es6 模块化语法，需要babel转义！具体操作可以看babel的讲解。<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h2 id="什么是-Webpack"><a href="#什么是-Webpack" class="headerlink" title="什么是 Webpack"></a>什么是 Webpack</h2>Webpack 是一个前端的资源、打包工具！<h2 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h2></li></ul></li></ul><ol><li>安装<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g webpack webpack-cli</span><br></pre></td></tr></table></figure></div></li><li>查看版本信息<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure></div><a href="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdeiorss9aj30qm098jri.jpg" data-fancybox="group" data-caption="安装图片" class="fancybox"><img alt="安装图片" title="安装图片" data-src="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdeiorss9aj30qm098jri.jpg" class="lazyload"></a></li><li>初始化项目</li></ol><ul><li><p>手动命令行</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack --mode=development</span><br></pre></td></tr></table></figure></div></li><li><p>写脚本（scripts）<br>在package.json中的scripts中配置脚本，npm run xxxx</p></li><li><p>例子，来源自网路</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 提供 mode 配置选项，告知 webpack 使用相应模式的内置优化</span></span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  <span class="comment">// 基础目录，绝对路径，用于配置中解析入口起点（entry point）和 loader 默认使用当前目录，但是推荐在配置中传递一个值</span></span><br><span class="line">  context: <span class="string">'C:\\project\\vueTest'</span>,</span><br><span class="line">  <span class="comment">// 此选项控制是否生成，以及如何生成 source map 使用 SourceMapDevToolPlugin 进行更细粒度的配置。查看 source-map-loader 来处理已有的 source map</span></span><br><span class="line">  devtool: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 此选项可以配置是否polyfill或mock某些Node.js全局变量和模块。这可以使最初为Node.js环境编写的代码。在其他环境中允许</span></span><br><span class="line">  node: &#123;</span><br><span class="line">    setImmediate: <span class="literal">false</span>,</span><br><span class="line">    process: <span class="string">'mock'</span>,</span><br><span class="line">    dgram: <span class="string">'empty'</span>,</span><br><span class="line">    fs: <span class="string">'empty'</span>,</span><br><span class="line">     net: <span class="string">'empty'</span>,</span><br><span class="line">    tls: <span class="string">'empty'</span>,</span><br><span class="line">    child_process: <span class="string">'empty'</span></span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">// 默认为 ./src</span></span><br><span class="line">  <span class="comment">// 这里应用程序开始执行</span></span><br><span class="line">  <span class="comment">// webpack 开始打包</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// path webpack 如何输出结果的相关选项</span></span><br><span class="line">    path: <span class="string">'C:\\project\\vueTest\\dist'</span>, <span class="comment">// string</span></span><br><span class="line">    <span class="comment">// 所有输出文件的目标路径</span></span><br><span class="line">    <span class="comment">// 必须是绝对路径（使用node.js的path模块）</span></span><br><span class="line">    filename: <span class="string">'js/[name].[contenthash:8].js'</span>,</span><br><span class="line">    <span class="comment">// 入口分块(entry chunk) 的文件名称模板</span></span><br><span class="line">    publicPath: <span class="string">'/'</span>,</span><br><span class="line">    <span class="comment">// 此选项决定了非入口(non-entry) chunk 文件的名称。有关可取的值的详细信息，请查看</span></span><br><span class="line">output.filename 选项。</span><br><span class="line">    chunkFilename: <span class="string">'js/[name].[contenthash:8].js'</span></span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">//解析 配置模块如何解析，例如，挡在ES2015中调用import "loadsh",resolve选项能够对webpack查找“loadsh”的方式取做修改</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 创建import或require的别名，来确保模块引入变得简单、例如，一些位于 src/ 文件夹下</span></span><br><span class="line">的常用模块：</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: <span class="string">'C:\\project\\vueTest\\src'</span>,</span><br><span class="line">      vue$: <span class="string">'vue/dist/vue.runtime.esm.js'</span></span><br><span class="line">   &#125;,</span><br><span class="line">    <span class="comment">// 自动解析确定的扩展。默认值为['.wasm', '.mjs', '.js', '.json']</span></span><br><span class="line">    <span class="comment">// 能够使用户在引入模块时不带扩展： 如import File from '../path/to/file';</span></span><br><span class="line">    extensions: [</span><br><span class="line">      <span class="string">'.js'</span>,</span><br><span class="line">      <span class="string">'.jsx'</span>,</span><br><span class="line">      <span class="string">'.vue'</span>,</span><br><span class="line">      <span class="string">'.json'</span></span><br><span class="line">   ],</span><br><span class="line">    <span class="comment">// 告诉webpack 解析模块时应该搜索的目录，</span></span><br><span class="line">    <span class="comment">// 绝对路径和相对路径都能使用，但是要知道它们之间有一点差异</span></span><br><span class="line">    <span class="comment">// 通过查看当前目录以及祖先路径，相对路径将类似于Node查找‘node_modules’</span></span><br><span class="line">    modules: [</span><br><span class="line">      <span class="comment">// 模块别名列表</span></span><br><span class="line">      <span class="string">'node_modules'</span>,</span><br><span class="line">      <span class="string">'C:\\project\\vueTest\\node_modules'</span>,</span><br><span class="line">      <span class="string">'C:\\project\\vueTest\\node_modules\\@vue\\cli-</span></span><br><span class="line"><span class="string">service\\node_modules'</span></span><br><span class="line">   ]</span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">// 这组选项与上面的resolve对象的属性集合相同，但是仅用于来解析webpack的loader包。</span></span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    modules: [</span><br><span class="line">      <span class="string">'C:\\project\\vueTest\\node_modules\\@vue\\cli-plugin-</span></span><br><span class="line"><span class="string">eslint\\node_modules'</span>,</span><br><span class="line">      <span class="string">'C:\\project\\vueTest\\node_modules\\@vue\\cli-plugin-</span></span><br><span class="line"><span class="string">babel\\node_modules'</span>,</span><br><span class="line">      <span class="string">'node_modules'</span>,</span><br><span class="line">      <span class="string">'C:\\project\\vueTest\\node_modules'</span>,</span><br><span class="line">      <span class="string">'C:\\project\\vueTest\\node_modules\\@vue\\cli-</span></span><br><span class="line"><span class="string">service\\node_modules'</span></span><br><span class="line">    ]</span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">// 模块 module 决定了 如何处理项目中的不同类型的模块</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 防止webpakc解析哪些任何与给定正则表达式匹配的文件。忽略的文件中不应该含有important,require,define的调用，或任何其他导入机制忽略大型的libaray可以提高构建性能</span></span><br><span class="line">    noParse: <span class="regexp">/^(vue|vue-router|vuex|vuex-router-sync)$/</span>,</span><br><span class="line">    <span class="comment">// 模块规格 （匹配loader，解析器等选项）</span></span><br><span class="line">    <span class="comment">// loaders webpack可以使用loader来预处理文件。这允许你打包除javascript之外的任何静态资源,你可以使用node.js来更简单的编写自己的loader</span></span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">/* config.module.rule('vue') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="comment">// 有一些性能开销较大的loader之前添加此loader,可以将结果缓存到磁盘里</span></span><br><span class="line">            loader: <span class="string">'cache-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              cacheDirectory:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\.cache\\vue-loader'</span>,</span><br><span class="line">              cacheIdentifier: <span class="string">'c12e2af6'</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="comment">// 以及 `.vue` 文件中的 `&lt;script&gt;` 块</span></span><br><span class="line">            loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">// 模板编译器的选项。当使用默认的 vue-template-compiler 的时候，你可以使用这个选项来添加自定义编译器指令、模块或通过 &#123; preserveWhitespace: false &#125; 放弃模板标签之间的空格。</span></span><br><span class="line">              compilerOptions: &#123;</span><br><span class="line">                preserveWhitespace: <span class="literal">false</span></span><br><span class="line">             &#125;,</span><br><span class="line">              <span class="comment">// 模板编译器的选项。当使用默认的 vue-template-compiler 的时候，你可以使用这个选项来添加自定义编译器指令、模块或通过 &#123; preserveWhitespace: false &#125; 放弃模板标签之间的空格。</span></span><br><span class="line">              cacheDirectory:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\.cache\\vue-loader'</span>,</span><br><span class="line">              cacheIdentifier: <span class="string">'c12e2af6'</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('images') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpe?g|gif|webp)(\?.*)?$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">         &#123; </span><br><span class="line">            <span class="comment">// npm install --save-dev url-loader</span></span><br><span class="line">            <span class="comment">// npm install --save-dev file-loader</span></span><br><span class="line">            <span class="comment">// 用法" class="icon-link" href="#用法"&gt;</span></span><br><span class="line">            <span class="comment">// 加载文件为base64编码的URL</span></span><br><span class="line">            <span class="comment">// 以字节为单位</span></span><br><span class="line">            <span class="comment">// 当文件大于限制(以字节为单位)时，为文件指定加载器</span></span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">               limit: <span class="number">10240</span>, <span class="comment">// 以字节为单位</span></span><br><span class="line">              fallback: &#123; <span class="comment">// 当文件大于限制(以字节为单位)时，为文件指定加</span></span><br><span class="line">载器</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  name: <span class="string">'img/[name].[hash:8].[ext]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('svg') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.(svg)(\?.*)?$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="comment">// npm install --save-dev file-loader</span></span><br><span class="line">            <span class="comment">// 默认情况下，生成的文件的文件名就是文件内容的MD5哈希值并保留所引</span></span><br><span class="line">用资源的原始扩展名</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">'img/[name].[hash:8].[ext]'</span></span><br><span class="line">           &#125;</span><br><span class="line">            <span class="comment">// 生成文件 file.png，输出到输出目录并返回 public URL。</span></span><br><span class="line">            <span class="comment">// "/public/path/0dcbbaa7013869e351f.png"</span></span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('media') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="comment">// npm install --save-dev url-loader</span></span><br><span class="line">            <span class="comment">// npm install --save-dev file-loader</span></span><br><span class="line">            <span class="comment">// 用法" class="icon-link" href="#用法"&gt;</span></span><br><span class="line">            <span class="comment">// 加载文件为base64编码的URL</span></span><br><span class="line">            <span class="comment">// 以字节为单位</span></span><br><span class="line">            <span class="comment">// 当文件大于限制(以字节为单位)时，为文件指定加载器</span></span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">4096</span>,</span><br><span class="line">              fallback: &#123;</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  name: <span class="string">'media/[name].[hash:8].[ext]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('fonts') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">// npm install --save-dev url-loader</span></span><br><span class="line">            <span class="comment">// npm install --save-dev file-loader</span></span><br><span class="line">            <span class="comment">// 用法" class="icon-link" href="#用法"&gt;</span></span><br><span class="line">            <span class="comment">// 加载文件为base64编码的URL</span></span><br><span class="line">            <span class="comment">// 以字节为单位</span></span><br><span class="line">            <span class="comment">// 当文件大于限制(以字节为单位)时，为文件指定加载器</span></span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">4096</span>,</span><br><span class="line">              fallback: &#123;</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  name: <span class="string">'fonts/[name].[hash:8].[ext]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">// 一个简单地将pug模板编译成HTML的加载器</span></span><br><span class="line">      <span class="comment">/* config.module.rule('pug') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">         &#123;</span><br><span class="line">            loader: <span class="string">'pug-plain-loader'</span></span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('css') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        oneOf: [</span><br><span class="line">          <span class="comment">/* config.module.rule('css').oneOf('vue-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/module/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 加载.css文件</span></span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>, <span class="comment">// 启用/禁用 CSS 模块</span></span><br><span class="line">                  importLoaders: <span class="number">2</span>, <span class="comment">// 在 css-loader 前应用的loader 的数量</span></span><br><span class="line">                  modules: <span class="literal">true</span>, <span class="comment">// 启用/禁用 CSS 模块</span></span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 加载器webpack来处理CSS与PostCSS</span></span><br><span class="line">                 loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('css').oneOf('vue') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/\?vue/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span> <span class="comment">// 在 css-loader 前应用的</span></span><br><span class="line">loader 的数量</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('css').oneOf('normal-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            test: <span class="regexp">/\.module\.\w+$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 解释（interpret） @import 和 url(). 会import/require()后再解析它们</span></span><br><span class="line">                <span class="comment">// 引用合适的loader是file-loader和url-loader</span></span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('css').oneOf('normal') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('postcss') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.p(ost)?css$/</span>,</span><br><span class="line">        oneOf: [</span><br><span class="line">          <span class="comment">/* config.module.rule('postcss').oneOf('vue-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/module/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">                &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('postcss').oneOf('vue') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/\?vue/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('postcss').oneOf('normal-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            test: <span class="regexp">/\.module\.\w+$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                 loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('postcss').oneOf('normal') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">// 加载一个SASS/SCSS文件并将其编译为CSS。</span></span><br><span class="line">      <span class="comment">/* config.module.rule('scss') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        oneOf: [</span><br><span class="line">          <span class="comment">/* config.module.rule('scss').oneOf('vue-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/module/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 加载css</span></span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                   localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">         </span><br><span class="line">          <span class="comment">/* config.module.rule('scss').oneOf('vue') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/\?vue/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 加载一个SASS/SCSS文件并将其编译为CSS。</span></span><br><span class="line">                loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('scss').oneOf('normal-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            test: <span class="regexp">/\.module\.\w+$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                 loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 加载一个SASS/SCSS文件并将其编译为CSS。</span></span><br><span class="line">                loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('scss').oneOf('normal') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 加载一个SASS/SCSS文件并将其编译为CSS。</span></span><br><span class="line">                loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                   sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('sass') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.sass$/</span>,</span><br><span class="line">        oneOf: [</span><br><span class="line">          <span class="comment">/* config.module.rule('sass').oneOf('vue-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/module/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 加载一个SASS/SCSS文件并将其编译为CSS。</span></span><br><span class="line">                loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  indentedSyntax: <span class="literal">true</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('sass').oneOf('vue') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/\?vue/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 加载一个SASS/SCSS文件并将其编译为CSS。</span></span><br><span class="line">                loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  indentedSyntax: <span class="literal">true</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('sass').oneOf('normal-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            test: <span class="regexp">/\.module\.\w+$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  indentedSyntax: <span class="literal">true</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">            ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('sass').oneOf('normal') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'sass-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  indentedSyntax: <span class="literal">true</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('less') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        oneOf: [</span><br><span class="line">          <span class="comment">/* config.module.rule('less').oneOf('vue-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/module/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                   localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'less-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('less').oneOf('vue') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/\?vue/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'less-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('less').oneOf('normal-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            test: <span class="regexp">/\.module\.\w+$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                   publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'less-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('less').oneOf('normal') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'less-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;</span><br><span class="line">        ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('stylus') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.styl(us)?$/</span>,</span><br><span class="line">        oneOf: [</span><br><span class="line">          <span class="comment">/* config.module.rule('stylus').oneOf('vue-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/module/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'stylus-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  preferPathResolver: <span class="string">'webpack'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('stylus').oneOf('vue') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            resourceQuery: <span class="regexp">/\?vue/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">                &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'stylus-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  preferPathResolver: <span class="string">'webpack'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('stylus').oneOf('normal-modules') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            test: <span class="regexp">/\.module\.\w+$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span>,</span><br><span class="line">                  modules: <span class="literal">true</span>,</span><br><span class="line">                  localIdentName:</span><br><span class="line"><span class="string">'[name]_[local]_[hash:base64:5]'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'stylus-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  preferPathResolver: <span class="string">'webpack'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;,</span><br><span class="line">          <span class="comment">/* config.module.rule('stylus').oneOf('normal') */</span></span><br><span class="line">         &#123;</span><br><span class="line">            use: [</span><br><span class="line">             &#123;</span><br><span class="line">                 loader:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\mini-css-extract-plugin\\dist\\loader.js'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  publicPath: <span class="string">'../'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  importLoaders: <span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">                loader: <span class="string">'stylus-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  sourceMap: <span class="literal">false</span>,</span><br><span class="line">                  preferPathResolver: <span class="string">'webpack'</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           ]</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('js') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        exclude: [</span><br><span class="line">          filepath =&gt; &#123;</span><br><span class="line">            <span class="comment">// always transpile js in vue files</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="regexp">/\.vue\.jsx?$/</span>.test(filepath)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">           &#125;</span><br><span class="line">            <span class="comment">// exclude dynamic entries from cli-service</span></span><br><span class="line">            <span class="keyword">if</span> (filepath.startsWith(cliServicePath)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">           &#125;</span><br><span class="line">            <span class="comment">// check if this is something the user explicitly wants</span></span><br><span class="line">to transpile</span><br><span class="line">            <span class="keyword">if</span> (options.transpileDependencies.some(<span class="function"><span class="params">dep</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">typeof</span> dep === <span class="string">'string'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> filepath.includes(path.normalize(dep))</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> filepath.match(dep)</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">           &#125;</span><br><span class="line">            <span class="comment">// Don't transpile node_modules</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/node_modules/</span>.test(filepath)</span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line">         use: [</span><br><span class="line">         &#123;  <span class="comment">// 在一些性能开销较大的 loader 之前添加此 loader，以将结果缓存到磁盘里。</span></span><br><span class="line">            loader: <span class="string">'cache-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              cacheDirectory:</span><br><span class="line"><span class="string">'C:\\project\\vueTest\\node_modules\\.cache\\babel-loader'</span>,</span><br><span class="line">              cacheIdentifier: <span class="string">'1218c33d'</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="comment">// 把这个 loader 放置在其他 loader 之前， 放置在这个 loader 之后的 loader 就会在一个单独的 worker 池(worker pool)中运行</span></span><br><span class="line">            <span class="comment">// 每个 worker 都是一个单独的有 600ms 限制的 node.js 进程。同时跨进程的数据交换也会被限制。</span></span><br><span class="line">            loader: <span class="string">'thread-loader'</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;  <span class="comment">// 这个包允许使用Babel和webpack传输JavaScript文件。</span></span><br><span class="line">            loader: <span class="string">'babel-loader'</span></span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">      <span class="comment">/* config.module.rule('eslint') */</span></span><br><span class="line">     &#123;</span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        test: <span class="regexp">/\.(vue|(j|t)sx?)$/</span>,</span><br><span class="line">        exclude: [</span><br><span class="line">          /node_modules/,</span><br><span class="line">          <span class="string">'C:\\project\\vueTest\\node_modules\\@vue\\cli-service\\lib'</span></span><br><span class="line">       ],</span><br><span class="line">        use: [</span><br><span class="line">         &#123;</span><br><span class="line">            loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              extensions: [</span><br><span class="line">                <span class="string">'.js'</span>,</span><br><span class="line">                <span class="string">'.jsx'</span>,</span><br><span class="line">                <span class="string">'.vue'</span></span><br><span class="line">             ],</span><br><span class="line">              cache: <span class="literal">true</span>,</span><br><span class="line">              cacheIdentifier: <span class="string">'c384f39c'</span>,</span><br><span class="line">              emitWarning: <span class="literal">true</span>,</span><br><span class="line">              emitError: <span class="literal">false</span>,</span><br><span class="line">              formatter: <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> errors = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">let</span> warnings = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">let</span> fixableErrors = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">let</span> fixableWarnings = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">const</span> resultsWithMessages =</span><br><span class="line">results.filter(<span class="function"><span class="params">result</span> =&gt;</span> result.messages.length &gt; <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">let</span> output =</span><br><span class="line">resultsWithMessages.reduce(<span class="function">(<span class="params">resultsOutput, result</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="keyword">const</span> messages = result.messages.map(message</span><br><span class="line">=&gt; <span class="string">`<span class="subst">$&#123;formatMessage(message, result)&#125;</span>\n\n`</span>);</span><br><span class="line">                  errors += result.errorCount;</span><br><span class="line">                   warnings += result.warningCount;</span><br><span class="line">                  fixableErrors += result.fixableErrorCount;</span><br><span class="line">                  fixableWarnings +=</span><br><span class="line">result.fixableWarningCount;</span><br><span class="line">                  <span class="keyword">return</span> resultsOutput.concat(messages);</span><br><span class="line">               &#125;, []).join(<span class="string">"\n"</span>);</span><br><span class="line">                output += <span class="string">"\n"</span>;</span><br><span class="line">                output += formatSummary(errors, warnings,</span><br><span class="line">fixableErrors, fixableWarnings);</span><br><span class="line">                <span class="keyword">return</span> (errors + warnings) &gt; <span class="number">0</span> ? output : <span class="string">""</span>;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">// 优化</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">     &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          test: <span class="regexp">/\.js(\?.*)?$/i</span>,</span><br><span class="line">          warningsFilter: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         &#125;,</span><br><span class="line">          extractComments: <span class="literal">false</span>,</span><br><span class="line">          sourceMap: <span class="literal">false</span>,</span><br><span class="line">          cache: <span class="literal">true</span>,</span><br><span class="line">          cacheKeys: <span class="function"><span class="keyword">function</span> (<span class="params">defaultCacheKeys</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> defaultCacheKeys;</span><br><span class="line">         &#125;,</span><br><span class="line">          parallel: <span class="literal">true</span>,</span><br><span class="line">          include: <span class="literal">undefined</span>,</span><br><span class="line">          exclude: <span class="literal">undefined</span>,</span><br><span class="line">          minify: <span class="literal">undefined</span>,</span><br><span class="line">          uglifyOptions: &#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">              arrows: <span class="literal">false</span>,</span><br><span class="line">              collapse_vars: <span class="literal">false</span>,</span><br><span class="line">              comparisons: <span class="literal">false</span>,</span><br><span class="line">              computed_props: <span class="literal">false</span>,</span><br><span class="line">              hoist_funs: <span class="literal">false</span>,</span><br><span class="line">              hoist_props: <span class="literal">false</span>,</span><br><span class="line">              hoist_vars: <span class="literal">false</span>,</span><br><span class="line">              inline: <span class="literal">false</span>,</span><br><span class="line">              loops: <span class="literal">false</span>,</span><br><span class="line">              negate_iife: <span class="literal">false</span>,</span><br><span class="line">              properties: <span class="literal">false</span>,</span><br><span class="line">              reduce_funcs: <span class="literal">false</span>,</span><br><span class="line">              reduce_vars: <span class="literal">false</span>,</span><br><span class="line">              switches: <span class="literal">false</span>,</span><br><span class="line">              toplevel: <span class="literal">false</span>,</span><br><span class="line">              typeofs: <span class="literal">false</span>,</span><br><span class="line">              booleans: <span class="literal">true</span>,</span><br><span class="line">               if_return: <span class="literal">true</span>,</span><br><span class="line">              sequences: <span class="literal">true</span>,</span><br><span class="line">              unused: <span class="literal">true</span>,</span><br><span class="line">              conditionals: <span class="literal">true</span>,</span><br><span class="line">              dead_code: <span class="literal">true</span>,</span><br><span class="line">              evaluate: <span class="literal">true</span></span><br><span class="line">           &#125;,</span><br><span class="line">            output: &#123;</span><br><span class="line">              comments: <span class="regexp">/^\**!|@preserve|@license|@cc_on/</span></span><br><span class="line">           &#125;,</span><br><span class="line">            mangle: &#123;</span><br><span class="line">              safari10: <span class="literal">true</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   ],</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: <span class="string">'chunk-vendors'</span>,</span><br><span class="line">          test: <span class="regexp">/[\\\/]node_modules[\\\/]/</span>,</span><br><span class="line">          priority: <span class="number">-10</span>,</span><br><span class="line">          chunks: <span class="string">'initial'</span></span><br><span class="line">       &#125;,</span><br><span class="line">        common: &#123;</span><br><span class="line">          name: <span class="string">'chunk-common'</span>,</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          priority: <span class="number">-20</span>,</span><br><span class="line">          chunks: <span class="string">'initial'</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">// webpack插件列表</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">/* config.plugin('vue-loader') */</span></span><br><span class="line">    <span class="comment">// 它的职责是将你定义过的其它规则复制并应用到 .vue 文件里相应语言的块。例如，如果你有一条匹配 /\.js$/ 的规则，那么它会应用到 .vue 文件里的 &lt;script&gt; 块</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="comment">/* config.plugin('define') */</span></span><br><span class="line">    <span class="comment">// DefinePlugin 中 process.env 键的简写方式。</span></span><br><span class="line">    <span class="keyword">new</span> DefinePlugin(</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="string">'process.env'</span>: &#123;</span><br><span class="line">          NODE_ENV: <span class="string">'"production"'</span>,</span><br><span class="line">          VUE_APP_CLI_UI_URL: <span class="string">'""'</span>,</span><br><span class="line">          BASE_URL: <span class="string">'"/"'</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">/* config.plugin('case-sensitive-paths') */</span></span><br><span class="line">    <span class="comment">// 这个Webpack插件强制所有必需模块的完整路径与磁盘上实际路径的精确情况匹配。使用这个插件可以帮助缓解在OSX上工作的开发人员与其他开发人员发生冲突，或者构建运行其他操作系统的机器，这些操作系统需要正确使用大小写的路径。</span></span><br><span class="line">    <span class="keyword">new</span> CaseSensitivePathsPlugin(),</span><br><span class="line">    <span class="comment">/* config.plugin('friendly-errors') */</span></span><br><span class="line">     <span class="comment">// 识别某些类的webpack错误并清理、聚合和优先化它们，以提供更好的开发人员体验。</span></span><br><span class="line">    <span class="keyword">new</span> FriendlyErrorsWebpackPlugin(</span><br><span class="line">     &#123;</span><br><span class="line">        additionalTransformers: [</span><br><span class="line">          error =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (error.webpackError) &#123;</span><br><span class="line">              <span class="keyword">const</span> message = <span class="keyword">typeof</span> error.webpackError ===</span><br><span class="line"><span class="string">'string'</span></span><br><span class="line">                ? error.webpackError</span><br><span class="line">               : error.webpackError.message || <span class="string">''</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">const</span> &#123; re, msg, type &#125; <span class="keyword">of</span> rules) &#123;</span><br><span class="line">                <span class="keyword">const</span> match = message.match(re)</span><br><span class="line">                <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, error, &#123;</span><br><span class="line">                    <span class="comment">// type is necessary to avoid being</span></span><br><span class="line">printed <span class="keyword">as</span> defualt error</span><br><span class="line">                    <span class="comment">// by friendly-error-webpack-plugin</span></span><br><span class="line">                    type,</span><br><span class="line">                    shortMessage: msg(error, match)</span><br><span class="line">                 &#125;)</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">              <span class="comment">// no match, unknown webpack error without a</span></span><br><span class="line">message.</span><br><span class="line">              <span class="comment">// friendly-error-webpack-plugin fails to handle</span></span><br><span class="line"><span class="keyword">this</span>.</span><br><span class="line">              <span class="keyword">if</span> (!error.message) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, error, &#123;</span><br><span class="line">                  type: <span class="string">'unknown-webpack-error'</span>,</span><br><span class="line">                  shortMessage: message</span><br><span class="line">               &#125;)</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> error</span><br><span class="line">         &#125;</span><br><span class="line">       ],</span><br><span class="line">        additionalFormatters: [</span><br><span class="line">          errors =&gt; &#123;</span><br><span class="line">            errors = errors.filter(<span class="function"><span class="params">e</span> =&gt;</span> e.shortMessage)</span><br><span class="line">            <span class="keyword">if</span> (errors.length) &#123;</span><br><span class="line">              <span class="keyword">return</span> errors.map(<span class="function"><span class="params">e</span> =&gt;</span> e.shortMessage)</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">// 为每个引入 CSS 的 JS 文件创建一个 CSS 文件 提取css到一个css文件中</span></span><br><span class="line">    <span class="comment">/* config.plugin('extract-css') */</span></span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(</span><br><span class="line">     &#123;</span><br><span class="line">        filename: <span class="string">'css/[name].[contenthash:8].css'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'css/[name].[contenthash:8].css'</span></span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">/* config.plugin('optimize-css') */</span></span><br><span class="line">    <span class="comment">// 优化css</span></span><br><span class="line">    <span class="keyword">new</span> OptimizeCssnanoPlugin(</span><br><span class="line">     &#123;</span><br><span class="line">         sourceMap: <span class="literal">false</span>,</span><br><span class="line">        cssnanoOptions: &#123;</span><br><span class="line">          preset: [</span><br><span class="line">            <span class="string">'default'</span>,</span><br><span class="line">           &#123;</span><br><span class="line">              mergeLonghand: <span class="literal">false</span>,</span><br><span class="line">              cssDeclarationSorter: <span class="literal">false</span></span><br><span class="line">           &#125;</span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">// 该插件会根据模块的相对路径生成一个四位数的hash作为模块id, 建议用于生产环境。</span></span><br><span class="line">    <span class="comment">/* config.plugin('hash-module-ids') */</span></span><br><span class="line">    <span class="keyword">new</span> HashedModuleIdsPlugin(</span><br><span class="line">     &#123;</span><br><span class="line">        hashDigest: <span class="string">'hex'</span></span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">/* config.plugin('named-chunks') */</span></span><br><span class="line">    <span class="keyword">new</span> NamedChunksPlugin(</span><br><span class="line">      chunk =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (chunk.name) &#123;</span><br><span class="line">          <span class="keyword">return</span> chunk.name</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">const</span> hash = <span class="built_in">require</span>(<span class="string">'hash-sum'</span>)</span><br><span class="line">        <span class="keyword">const</span> joinedHash = hash(</span><br><span class="line">          <span class="built_in">Array</span>.from(chunk.modulesIterable, m =&gt; m.id).join(<span class="string">'_'</span>)</span><br><span class="line">       )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`chunk-`</span> + joinedHash</span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">// 简单创建 HTML 文件，用于服务器访问</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">/* config.plugin('html') */</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(</span><br><span class="line">     &#123;</span><br><span class="line">        templateParameters: <span class="function">(<span class="params">compilation, assets, pluginOptions</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// enhance html-webpack-plugin's built in template params</span></span><br><span class="line">          <span class="keyword">let</span> stats</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">            <span class="comment">// make stats lazy as it is expensive</span></span><br><span class="line">            <span class="keyword">get</span> webpack() &#123;</span><br><span class="line">              <span class="keyword">return</span> stats || (stats =</span><br><span class="line">compilation.getStats().toJson())</span><br><span class="line">           &#125;,</span><br><span class="line">            compilation: compilation,</span><br><span class="line">            webpackConfig: compilation.options,</span><br><span class="line">            htmlWebpackPlugin: &#123;</span><br><span class="line">              files: assets,</span><br><span class="line">              options: pluginOptions</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;, resolveClientEnv(options, <span class="literal">true</span> <span class="comment">/* raw */</span>))</span><br><span class="line">       &#125;,</span><br><span class="line">        minify: &#123;</span><br><span class="line">          removeComments: <span class="literal">true</span>,</span><br><span class="line">           collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">          removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">          collapseBooleanAttributes: <span class="literal">true</span>,</span><br><span class="line">          removeScriptTypeAttributes: <span class="literal">true</span></span><br><span class="line">       &#125;,</span><br><span class="line">        template: <span class="string">'C:\\project\\vueTest\\public\\index.html'</span></span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">/* config.plugin('pwa') */</span></span><br><span class="line">    <span class="keyword">new</span> HtmlPwaPlugin(</span><br><span class="line">     &#123;</span><br><span class="line">        name: <span class="string">'vueTest'</span></span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">/* config.plugin('preload') */</span></span><br><span class="line">    <span class="keyword">new</span> PreloadPlugin(</span><br><span class="line">     &#123;</span><br><span class="line">        rel: <span class="string">'preload'</span>,</span><br><span class="line">        include: <span class="string">'initial'</span>,</span><br><span class="line">        fileBlacklist: [</span><br><span class="line">          /\.map$/,</span><br><span class="line">          /hot-update\.js$/</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">/* config.plugin('prefetch') */</span></span><br><span class="line">    <span class="comment">// 预取出普通的模块请求(module request)，可以让这些模块在他们被 import 或者是require 之前就解析并且编译。使用这个预取插件可以提升性能。可以多试试在编译前记录时间(profile)来决定最佳的预取的节点。</span></span><br><span class="line">    <span class="keyword">new</span> PreloadPlugin(</span><br><span class="line">     &#123;</span><br><span class="line">        rel: <span class="string">'prefetch'</span>,</span><br><span class="line">        include: <span class="string">'asyncChunks'</span></span><br><span class="line">     &#125;</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">// 将单个文件或整个目录复制到构建目录。</span></span><br><span class="line">    <span class="comment">/* config.plugin('copy') */</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(</span><br><span class="line">     [</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="keyword">from</span>: <span class="string">'C:\\project\\vueTest\\public'</span>,</span><br><span class="line">          to: <span class="string">'C:\\project\\vueTest\\dist'</span>,</span><br><span class="line">          toType: <span class="string">'dir'</span>,</span><br><span class="line">          ignore: [</span><br><span class="line">            <span class="string">'index.html'</span>,</span><br><span class="line">            <span class="string">'.DS_Store'</span></span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">   ),</span><br><span class="line">    <span class="comment">/* config.plugin('workbox') */</span></span><br><span class="line">    <span class="keyword">new</span> GenerateSW(</span><br><span class="line">     &#123;</span><br><span class="line">        exclude: [</span><br><span class="line">          /\.map$/,</span><br><span class="line">          /img\/icons\<span class="comment">//,</span></span><br><span class="line">          /favicon\.ico$/,</span><br><span class="line">          /manifest\.json$/</span><br><span class="line">       ],</span><br><span class="line">        cacheId: <span class="string">'vueTest'</span></span><br><span class="line">     &#125;</span><br><span class="line">   )</span><br><span class="line"> ],</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [</span><br><span class="line">      <span class="string">'./src/main.js'</span></span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>webpack 打包，可以让我们的代码不是那么繁琐，可以实现复用！</p><h1 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h1></li><li><p>什么是MVVM模式呢？</p><ul><li>MVVM(Model-View-ViewModel)是一种软件架构设计模式，由微软 WPF(用于替代 WinForm，以 前就是用这个技术开发桌面应用程序的)和 Silverlight(类似于 Java Applet，简单点说就是在浏览器上 运行的 WPF) 的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。 由 John Gossman(同样也是 WPF 和 Silverlight 的架构师)于 2005 年在他的博客上发表。</li><li>MVVM 源自于经典的 MVC(Model-View-Controller)模式。MVVM 的核心是 ViewModel 层，负责转 换 Model 中的数据对象来让数据变得更容易管理和使用，其作用如下:<ul><li>该层向上与视图层进行双向数据绑定</li><li>向下与 Model 层通过接口请求进行数据交互</li></ul></li><li>MVVM 已经相当成熟了，当下流行的 MVVM 框架有 Vue.js ， AngularJS 等。</li></ul></li><li><p>为什么要用MVVM模式？<br><a href="https://tva2.sinaimg.cn/large/005DJQmOgy1gdeez499g5j30cu0h6jrh.jpg" data-fancybox="group" data-caption="MVVM模式" class="fancybox"><img alt="MVVM模式" title="MVVM模式" data-src="https://tva2.sinaimg.cn/large/005DJQmOgy1gdeez499g5j30cu0h6jrh.jpg" class="lazyload"></a><br>  从上图可以看出若不是为了<strong>解耦</strong>，那又啥意思呢。它和MVC 模式一样，主要目的是分离视图(View)和模型(Model)。</p><ul><li><strong>低耦合</strong>: 视图(View)可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li><li><strong>可复用</strong>: 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li><li><strong>独立开发</strong>: 开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计。</li><li><strong>可测试</strong>: 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li></ul></li><li><p>小结：</p><p>  在Vue的理念中，主要工作重点专注在V层和VM层。</p><h1 id="Vue-基本语法"><a href="#Vue-基本语法" class="headerlink" title="Vue 基本语法"></a>Vue 基本语法</h1></li></ul><ol><li>数据绑定<ul><li>单向绑定 v-bind（主要用于视图获取vm中的值）<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>双向绑定 v-model(主要用于视图与vm中的值的同步，修改其中一个地方另外一个地方都会同步)<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model:value</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>事件绑定 v-on(可简化成@:xxx)<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 进行事件绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi"</span>&gt;</span> 按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sayHi"</span>&gt;</span>我是缩写<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul></li><li>流程控制<ul><li>v-if 判断<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果成立true则显示这个标签，否则隐藏！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span> 测试A <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span> 测试B <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span> 测试C <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>=<span class="string">""</span>&gt;</span> Other <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>v-for 循环<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遍历items,每一个节点为 item--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul></li><li>模板创建使用(可以将一些模块进行封装)<ul><li>用Vue.component 先注册一个模板组件</li><li>在视图层直接使用<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--组件：自定义标签, 内容就是template，将item 中的值传递给组件中的com_item--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component-hello</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:com_item</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component-hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```javascript</span><br><span class="line">// 先注册一个模板组件</span><br><span class="line">Vue.component('component-hello',&#123;</span><br><span class="line">    props:['com_item'],</span><br><span class="line">    template: "<span class="tag">&lt;<span class="name">li</span>&gt;</span>Hello &#123;&#123;com_item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>"</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">&lt;!-- 创建一个vm层   --&gt;</span></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">        el: '#app',</span><br><span class="line">        data: &#123;</span><br><span class="line">            items: ['张三','李四','王五']</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><h1 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h1><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">官网</a><h1 id="VUE-的生命周期"><a href="#VUE-的生命周期" class="headerlink" title="VUE 的生命周期"></a>VUE 的生命周期</h1><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdehr00lyqj30xc2cftaj.jpg" data-fancybox="group" data-caption="VUE生命周期" class="fancybox"><img alt="VUE生命周期" title="VUE生命周期" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdehr00lyqj30xc2cftaj.jpg" class="lazyload"></a></li></ul></li><li>生命周期钩子函数:钩子函数就是在做某些事件的时候去调用的函数</li><li>最重要的是“created”和“mounted”<h1 id="网络通信-axios"><a href="#网络通信-axios" class="headerlink" title="网络通信 axios"></a>网络通信 axios</h1>vue官方建议使用axios模块，其主要是在mounted事件时进行，通过该模块获取到后端业务数据，同步到vm层，进而在View层进行数据展示</li></ol><ul><li>axios与ajax一样是一个网络通讯框架，支持链式编程，调用非常方便简洁！</li><li>axios提供了所有别名方法如：get()、post()、delete()、put()、patch()…</li><li>安装,并且引入js<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure></div></li><li>调用API<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"articles"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ArticleBO&gt; <span class="title">list</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        ArticlePageVO vo = <span class="keyword">new</span> ArticlePageVO();</span><br><span class="line">        IPage page = vo.generatePage();</span><br><span class="line">        <span class="keyword">return</span> articleService.page(page, vo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>vue代码<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            list: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            axios.get(<span class="string">'http://localhost:8080/articles/list'</span>, &#123;</span><br><span class="line">                params: &#123;</span><br><span class="line">                    id: <span class="number">12</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.list = response.data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div></li></ul><h1 id="Vue-路由定义-vue-router"><a href="#Vue-路由定义-vue-router" class="headerlink" title="Vue 路由定义(vue-router)"></a>Vue 路由定义(vue-router)</h1><p>路由主要是用于控制页面中的内容跳转，通常套路为：</p><ul><li>定义路由组件</li><li>定义路由（核心），即定义路径的跳转关系</li><li>创建路由实例</li></ul><ol><li>安装<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-cli -g</span><br></pre></td></tr></table></figure></div></li><li>代码<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在Html页面中的固定模板！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 页面 路由就是a链接--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/student"</span>&gt;</span>学员<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/teacher"</span>&gt;</span>老师<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 页面的视图是如何渲染的呢 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/vue-router.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 1、 定义路由组件</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Welcome = &#123;template:<span class="string">'&lt;div&gt;欢迎&lt;/div&gt;'</span>&#125;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Student = &#123;template:<span class="string">'&lt;div&gt;Student&lt;/div&gt;'</span>&#125;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> Teacher = &#123;template:<span class="string">'&lt;div&gt;Teacher&lt;/div&gt;'</span>&#125;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 2、定义路由（核心）</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> routes = [</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 请求这个路由，会跳转到对应的视图当中！</span></span></span><br><span class="line"><span class="actionscript">   &#123;path: <span class="string">'/'</span>,redirect: <span class="string">'/welcome'</span>&#125;, <span class="comment">// 重定向到请求</span></span></span><br><span class="line"><span class="actionscript">   &#123;path: <span class="string">'/welcome'</span>,component: Welcome&#125;, <span class="comment">// 组件直接对应上面定义的组件即可！</span></span></span><br><span class="line"><span class="actionscript">   &#123;path: <span class="string">'/student'</span>,component: Student&#125;,</span></span><br><span class="line"><span class="actionscript">   &#123;path: <span class="string">'/teacher'</span>,component: Teacher&#125;</span></span><br><span class="line"> ];</span><br><span class="line"><span class="actionscript">  <span class="comment">// 3、创建 router 实例</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// routes: routes (缩写如果，同名的话)</span></span></span><br><span class="line">    routes</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">   <span class="comment">// router:router (缩写如果，同名的话)  </span></span></span><br><span class="line">    router</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>安装成功后，检测<br><a href="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdem985rm4j30os07sdfu.jpg" data-fancybox="group" data-caption="检测" class="fancybox"><img alt="检测" title="检测" data-src="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdem985rm4j30os07sdfu.jpg" class="lazyload"></a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="VUE" scheme="https://dakuzai.ml/categories/VUE/"/>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/tags/SpringBoot/"/>
    
      <category term="VUE" scheme="https://dakuzai.ml/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>走进Swagger</title>
    <link href="https://dakuzai.ml/2020/03/30/%E8%B5%B0%E8%BF%9BSwagger/"/>
    <id>https://dakuzai.ml/2020/03/30/%E8%B5%B0%E8%BF%9BSwagger/</id>
    <published>2020-03-30T16:21:10.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul><li>前后端分离：<ul><li>前端 –&gt; 前端的控制层，视图层. （专业的前端团队开发）</li><li>后端 –&gt; 后端控制层、服务层、数据访问层.（专业的后端团队开发）</li><li>前后端的交互是通过 API 来进行的？关于API的约定该怎么处理呢？</li></ul></li><li>早期：后端编写文档（协同文档），前端根据文档解析接口然后渲染视图！</li><li>问题：前后端集成，前端或者后端无法做到：及时协商！最终可能导致问题集中爆发或者项目延时！</li><li>现在得开源项目中，都有集成Swagger！<h1 id="什么是Swagger"><a href="#什么是Swagger" class="headerlink" title="什么是Swagger"></a>什么是Swagger</h1></li></ul><ol><li>导入依赖<br><a href="https://swagger.io/" target="_blank" rel="noopener">官网</a><br><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gdc1ddn0brj317u0j3djp.jpg" data-fancybox="group" data-caption="Swagger官网页面" class="fancybox"><img alt="Swagger官网页面" title="Swagger官网页面" data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gdc1ddn0brj317u0j3djp.jpg" class="lazyload"></a></li></ol><ul><li>号称世界上最流行的API框架！</li><li>Restful api 自动生成文档 ，和代码对应的</li><li>直接运行测试接口，不用下载 postman</li><li>支持多种语言：（Java、Php等）<h1 id="集成Swagger"><a href="#集成Swagger" class="headerlink" title="集成Swagger"></a>集成Swagger</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul><ol start="2"><li>编写配置<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 注册bean Docket</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主启动类开启配置！</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 使Swagger生效，默认是不开启！@EnableSwagger2</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootPlusApplication</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(SpringbootPlusApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>启动测试 : <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a><br><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdc1lb53f1j315w0k2aaz.jpg" data-fancybox="group" data-caption="启动测试" class="fancybox"><img alt="启动测试" title="启动测试" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdc1lb53f1j315w0k2aaz.jpg" class="lazyload"></a></li><li>注意点：<br>写Controller的之后一定要精确到方法！<br><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdc1nwho1kj315g0fi0t5.jpg" data-fancybox="group" data-caption="ResutFul风格" class="fancybox"><img alt="ResutFul风格" title="ResutFul风格" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdc1nwho1kj315g0fi0t5.jpg" class="lazyload"></a><h1 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h1></li><li>配置文档信息<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">   .apiInfo(apiInfo()); <span class="comment">// 配置文档信息！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 配置文档信息 apiInfo</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Contact contact = <span class="keyword">new</span></span><br><span class="line">Contact(<span class="string">"coding"</span>,<span class="string">"https://www.icodingedu.com/course/52"</span>,<span class="string">"24736743@qq.com"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">    <span class="string">"SpringBoot-Plus 接口文档信息"</span>,</span><br><span class="line">    <span class="string">"所有的测试请求地址"</span>,</span><br><span class="line">    <span class="string">"v1.0"</span>,</span><br><span class="line">    <span class="string">"https://www.icodingedu.com/course/52"</span>, <span class="comment">//组织连接</span></span><br><span class="line">    contact,</span><br><span class="line">    <span class="string">"Apache 2.0"</span>,</span><br><span class="line">    <span class="string">"http://www.apache.org/licenses/LICENSE-2.0"</span>,</span><br><span class="line">    <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>配置接口扫描，需要哪些被扫描到文档中<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">   .apiInfo(apiInfo())</span><br><span class="line">   .select()</span><br><span class="line">   .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.coding.controller"</span>))</span><br><span class="line">   .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>如图：<br><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gdc1qo8n1nj315j0e3jrw.jpg" data-fancybox="group" data-caption="测试图片" class="fancybox"><img alt="测试图片" title="测试图片" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gdc1qo8n1nj315j0e3jrw.jpg" class="lazyload"></a></li></ul></li></ol><ul><li>其与的几个方法说明：  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">any()  # 扫描所有，项目的所有接口都会被扫描的</span><br><span class="line">none()  # 不扫描接口</span><br><span class="line">basePackage()  # 根据包路径扫描</span><br><span class="line">withMethodAnnotation(GetmMapping<span class="class">.<span class="keyword">class</span>) # 通过方法注解扫描！ 比如 <span class="title">GetMapper</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class"><span class="title">withClassAnnotation</span>(<span class="title">Controller</span>.<span class="title">class</span>) # 通过类上的注解扫描！</span></span><br></pre></td></tr></table></figure></div></li></ul><ol start="3"><li>设置哪些接口不被扫描！<br><a href="https://tva2.sinaimg.cn/large/005DJQmOgy1gdc1xc24acj315q03t74q.jpg" data-fancybox="group" data-caption="图片" class="fancybox"><img alt="图片" title="图片" data-src="https://tva2.sinaimg.cn/large/005DJQmOgy1gdc1xc24acj315q03t74q.jpg" class="lazyload"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">   .apiInfo(apiInfo()) <span class="comment">// 配置文档信息！</span></span><br><span class="line">   .select()</span><br><span class="line">   .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.coding.controller"</span>))</span><br><span class="line">    <span class="comment">// 配置path过滤请求！只扫描以 /kuang 开头的请求！</span></span><br><span class="line">   .paths(PathSelectors.ant(<span class="string">"/kuang/**"</span>))</span><br><span class="line">   .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="配置Swagger的开关"><a href="#配置Swagger的开关" class="headerlink" title="配置Swagger的开关"></a>配置Swagger的开关</h1>test、dev 环境下才可以显示 swagger-ui , prod 不显示！<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">   .apiInfo(apiInfo())</span><br><span class="line">   .enable(<span class="keyword">false</span>) <span class="comment">// 如果是false就无法在浏览器中访问！</span></span><br><span class="line">   .select()</span><br><span class="line">   .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.coding.controller"</span>))</span><br><span class="line">  </span><br><span class="line">   .paths(PathSelectors.ant(<span class="string">"/kuang/**"</span>))</span><br><span class="line">   .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>测试，如图<br><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gdc1yfpb0wj30q703et8q.jpg" data-fancybox="group" data-caption="测试结果" class="fancybox"><img alt="测试结果" title="测试结果" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gdc1yfpb0wj30q703et8q.jpg" class="lazyload"></a></li></ol><p><strong>提示：</strong><br>这里的 false 应该是一个变量：技巧点！通过Profiles类来获取限定咋们的开发环境！</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 设置要显示的swagger环境</span></span><br><span class="line">  Profiles of = Profiles.of(<span class="string">"dev"</span>, <span class="string">"test"</span>);</span><br><span class="line">  <span class="comment">// 判断是否处于该环境！</span></span><br><span class="line">  <span class="keyword">boolean</span> b = environment.acceptsProfiles(of);</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">   .apiInfo(apiInfo()) <span class="comment">// 配置文档信息！</span></span><br><span class="line">   .enable(b) <span class="comment">// 如果是false就无法在浏览器中访问！</span></span><br><span class="line">   .select()</span><br><span class="line">   .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.coding.controller"</span>))</span><br><span class="line">   .paths(PathSelectors.ant(<span class="string">"/kuang/**"</span>))</span><br><span class="line">   .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h1><p>这个大家现在过个眼熟即可，能掌握最好，后面我们使用MP一键生成！<br><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdc20kaacej316b0glt9m.jpg" data-fancybox="group" data-caption="Swagger" class="fancybox"><img alt="Swagger" title="Swagger" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gdc20kaacej316b0glt9m.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"group3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h1><ol><li>新建一个实体类<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 和注释差不多，但是会被Swagger识别</span></span><br><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"用户实体"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@ApiModelProperty</span>(<span class="string">"用户名"</span>)</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="meta">@ApiModelProperty</span>(<span class="string">"密码"</span>)</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>请求的接口配置！如果能够看到实体类配置！如果这个实体类在请求的返回值或者泛型中，那么就会<br>被映射！<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有返回值用到才会显示</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>测试一下，如图：<br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdc22ubdyvj314m05lt8j.jpg" data-fancybox="group" data-caption="测试" class="fancybox"><img alt="测试" title="测试" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdc22ubdyvj314m05lt8j.jpg" class="lazyload"></a></li><li>接口配置<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags=<span class="string">"AAAAA测试"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 后面我们自己开发项目的时候，名主要是写 方法注释和参数注释！</span></span><br><span class="line">  <span class="meta">@ApiOperation</span>(<span class="string">"coding的接口"</span>)</span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/coding"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">coding</span><span class="params">(@ApiParam(<span class="string">"这个名字会被返回！"</span>)</span> String username)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/kuang/hello"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello,Swagger"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// 只有返回值用到才会显示</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><h1 id="扩展：皮肤包！"><a href="#扩展：皮肤包！" class="headerlink" title="扩展：皮肤包！"></a>扩展：皮肤包！</h1></li><li>默认的 <a href="http://localhost:8081/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8081/swagger-ui.html</a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gdc28nh2ocj315g0h2dgd.jpg" data-fancybox="group" data-caption="swagger-ui" class="fancybox"><img alt="swagger-ui" title="swagger-ui" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gdc28nh2ocj315g0h2dgd.jpg" class="lazyload"></a></li><li>BootStrap-ui <a href="http://localhost:8080/doc.html" target="_blank" rel="noopener">http://localhost:8080/doc.html</a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/swagger-bootstrap-ui</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gdc29srzncj31720o2js6.jpg" data-fancybox="group" data-caption="BootStrap-ui" class="fancybox"><img alt="BootStrap-ui" title="BootStrap-ui" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gdc29srzncj31720o2js6.jpg" class="lazyload"></a></li><li>Layui的框架 <a href="http://localhost:8080/docs.html" target="_blank" rel="noopener">http://localhost:8080/docs.html</a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.caspar-chen/swagger-ui-layer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.caspar-chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-ui-layer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gdc2b8wamxj316y0j0wf9.jpg" data-fancybox="group" data-caption="Layui" class="fancybox"><img alt="Layui" title="Layui" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gdc2b8wamxj316y0j0wf9.jpg" class="lazyload"></a></li><li>mg-ui <a href="http://localhost:8080/document.html" target="_blank" rel="noopener">http://localhost:8080/document.html</a><br><a href="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdc2bwy26tj31710d7gmd.jpg" data-fancybox="group" data-caption="mg-ui" class="fancybox"><img alt="mg-ui" title="mg-ui" data-src="https://tvax3.sinaimg.cn/large/005DJQmOgy1gdc2bwy26tj31710d7gmd.jpg" class="lazyload"></a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Swagger" scheme="https://dakuzai.ml/categories/Swagger/"/>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/tags/SpringBoot/"/>
    
      <category term="swagger" scheme="https://dakuzai.ml/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>MVC自动配置</title>
    <link href="https://dakuzai.ml/2020/03/24/MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://dakuzai.ml/2020/03/24/MVC%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-24T19:06:15.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="理解方式"><a href="#理解方式" class="headerlink" title="理解方式"></a>理解方式</h1><ul><li><p>源码</p></li><li><p>官方文档</p><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-feat%20ures-spring-mvc-auto-con%EF%AC%81guration" target="_blank" rel="noopener">官方文档</a><br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gd58auudqdj30zh0fktbq.jpg" data-fancybox="group" data-caption="SpringMVC-Auto-configuration" class="fancybox"><img alt="SpringMVC-Auto-configuration" title="SpringMVC-Auto-configuration" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gd58auudqdj30zh0fktbq.jpg" class="lazyload"></a><br>(已经加注释，可自己去源码对号入座理解)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring MVC 自动配置</span></span><br><span class="line">Spring MVC Auto-configuration </span><br><span class="line"><span class="comment">// SpringBoot为SpringMVC 提供提供了自动配置，他可以很多好的工作于大多数的应用！</span></span><br><span class="line">Spring Boot provides auto-configuration <span class="keyword">for</span> Spring MVC that works well with most applications.</span><br><span class="line"> <span class="comment">// 自动配置在Spring默认配置的基础上添加了以下功能： </span></span><br><span class="line"> The auto-configuration adds the following features on top of Spring’s defaults: </span><br><span class="line"> <span class="comment">// 包含视图解析器 </span></span><br><span class="line"> Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans. </span><br><span class="line"> <span class="comment">// 支持静态资源文件的路径吗，包含webjar的支持 </span></span><br><span class="line"> Support <span class="keyword">for</span> serving <span class="keyword">static</span> resources, <span class="function">including support <span class="keyword">for</span> <span class="title">WebJars</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>). </span></span><br><span class="line"><span class="function"> <span class="comment">// 自动注册了转换器      </span></span></span><br><span class="line"><span class="function"> <span class="comment">// 转换器 网页提交的前端对象，到后台自动封装为具体的对象；"1" 自动转换为 数字 1； </span></span></span><br><span class="line"><span class="function"> <span class="comment">// 格式化器Formatter 【2020-03-18 后台可以自动封装为Date】</span></span></span><br><span class="line"><span class="function">Automatic registration of Converter, GenericConverter, and Formatter beans. </span></span><br><span class="line"><span class="function"><span class="comment">// 支持消息转换 </span></span></span><br><span class="line"><span class="function"><span class="comment">// request、response，对象自动转换为 json对象 </span></span></span><br><span class="line"><span class="function">Support <span class="keyword">for</span> <span class="title">HttpMessageConverters</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>. </span></span><br><span class="line"><span class="function"><span class="comment">// 定错代码生成规则 </span></span></span><br><span class="line"><span class="function">Automatic registration of <span class="title">MessageCodesResolver</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>. </span></span><br><span class="line"><span class="function"><span class="comment">// 支持首页定制 </span></span></span><br><span class="line"><span class="function">Static index.html support. </span></span><br><span class="line"><span class="function"><span class="comment">// 支持自定义图标 </span></span></span><br><span class="line"><span class="function">Custom Favicon <span class="title">support</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>. </span></span><br><span class="line"><span class="function"><span class="comment">//配置web数据绑定 </span></span></span><br><span class="line"><span class="function">Automatic use of a ConfigurableWebBindingInitializer <span class="title">bean</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br></pre></td></tr></table></figure></div><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gd59686hzsj30tw0iuqjj.jpg" data-fancybox="group" data-caption="WebMvcAutoConfiguration" class="fancybox"><img alt="WebMvcAutoConfiguration" title="WebMvcAutoConfiguration" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gd59686hzsj30tw0iuqjj.jpg" class="lazyload"></a></p></li><li><p>ContentNegotiatingViewResolver 内容协商视图解析器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ViewResolver<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(<span class="title">name</span> </span>= <span class="string">"viewResolver"</span>, value = ContentNegotiatingViewResolver<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ContentNegotiatingViewResolver</span> <span class="title">viewResolver</span>(<span class="title">BeanFactory</span> <span class="title">beanFactory</span>) </span>&#123;</span><br><span class="line">ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"><span class="comment">// ContentNegotiatingViewResolver uses all the other view resolvers to locate</span></span><br><span class="line"><span class="comment">// a view so it should have a high precedence</span></span><br><span class="line"><span class="comment">// ContentNegotiatingViewResolver 使用其他所有的视图解析器定位视图，因此它应该具有一 个高的优先级</span></span><br><span class="line">resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>解析视图名字</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="meta">@Nullable</span> <span class="comment">// 参数可以为空 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;    </span><br><span class="line">    RequestAttributes attrs = RequestContextHolder.getRequestAttributes();   </span><br><span class="line">    Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">"No current ServletRequestAttributes"</span>);    </span><br><span class="line">    List&lt;MediaType&gt; requestedMediaTypes = getMediaTypes(((ServletRequestAttributes) attrs).getRequest());    <span class="keyword">if</span> (requestedMediaTypes != <span class="keyword">null</span>) &#123;        </span><br><span class="line">        <span class="comment">// 获取所有候选的视图！        </span></span><br><span class="line">        List&lt;View&gt; candidateViews = getCandidateViews(viewName, locale, requestedMediaTypes);        </span><br><span class="line">        <span class="comment">// 获取最好的视图        </span></span><br><span class="line">        View bestView = getBestView(candidateViews, requestedMediaTypes, attrs);        </span><br><span class="line">        <span class="comment">// 返回最好的视图        </span></span><br><span class="line">        <span class="keyword">if</span> (bestView != <span class="keyword">null</span>) &#123;            </span><br><span class="line">            <span class="keyword">return</span> bestView;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    String mediaTypeInfo = logger.isDebugEnabled() &amp;&amp; requestedMediaTypes != <span class="keyword">null</span> ?        <span class="string">" given "</span> + requestedMediaTypes.toString() : <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.useNotAcceptableStatusCode) &#123;        </span><br><span class="line">     <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;            </span><br><span class="line">         logger.debug(<span class="string">"Using 406 NOT_ACCEPTABLE"</span> + mediaTypeInfo);        </span><br><span class="line">         &#125;        </span><br><span class="line">         <span class="keyword">return</span> NOT_ACCEPTABLE_VIEW;    </span><br><span class="line">         &#125;    </span><br><span class="line">         <span class="keyword">else</span> &#123;        </span><br><span class="line">             logger.debug(<span class="string">"View remains unresolved"</span> + mediaTypeInfo);        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h1 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h1><p>既然他是从容器中加载所有的视图解析器，那么我们可以猜想，我们自己写一个视图解析器，也可以被 扫描并加载！</p></li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li>写一个自己的bean<br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gd606b23axj30p50botgy.jpg" data-fancybox="group" data-caption="myViewResolver" class="fancybox"><img alt="myViewResolver" title="myViewResolver" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gd606b23axj30p50botgy.jpg" class="lazyload"></a>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己编写一个bean，像容器中添加自己的一个组建</span></span><br><span class="line"><span class="comment"> * ViewResolver：代表一个class</span></span><br><span class="line"><span class="comment"> * myViewResolver：就是自己取得一个名字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>Debug测试查看<br><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gd6050ma8vj30ww0jiwxo.jpg" data-fancybox="group" data-caption="DispatcherServlet" class="fancybox"><img alt="DispatcherServlet" title="DispatcherServlet" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gd6050ma8vj30ww0jiwxo.jpg" class="lazyload"></a><br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gd60av4en6j30r00gjnb9.jpg" data-fancybox="group" data-caption="Debug-viewResolvers" class="fancybox"><img alt="Debug-viewResolvers" title="Debug-viewResolvers" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gd60av4en6j30r00gjnb9.jpg" class="lazyload"></a><h1 id="格式化转化器Formatter"><a href="#格式化转化器Formatter" class="headerlink" title="格式化转化器Formatter"></a>格式化转化器Formatter</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="comment">// 服务 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 默认的时间 Formatting 的格式：    </span></span><br><span class="line">WebConversionService conversionService = <span class="keyword">new</span> WebConversionService(<span class="keyword">this</span>.mvcProperties.getDateFormat());    </span><br><span class="line">     addFormatters(conversionService);    </span><br><span class="line">     <span class="keyword">return</span> conversionService; </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码中默认的格式是通过 / 分割 </span></span><br><span class="line"><span class="comment">/**     </span></span><br><span class="line"><span class="comment">* Date format to use. For instance, `dd/MM/yyyy`.     </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">private</span> String dateFormat;</span><br><span class="line"><span class="comment">// 只要在 mvcProperties 中的，我们都可以进行手动的配置！</span></span><br></pre></td></tr></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>在SpringBoot中，如果我们想要使用自己定制化的东西，只需要给容器中添加这个组件就 好了！剩下的事情SpringBoot就会办公我们自动去做了！ </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/tags/SpringBoot/"/>
    
      <category term="SpringMVC" scheme="https://dakuzai.ml/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>静态资源处理及webjars理解</title>
    <link href="https://dakuzai.ml/2020/03/23/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E5%8F%8Awebjars%E7%90%86%E8%A7%A3/"/>
    <id>https://dakuzai.ml/2020/03/23/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E5%8F%8Awebjars%E7%90%86%E8%A7%A3/</id>
    <published>2020-03-23T21:08:22.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>SpringBoot默认是没有 webapp 目录的，那我们资源应该放在哪里呢？</p><h1 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h1><p>SpringMVC 整个 SSM 都是基于它的，所以我们第一步应该去研究 SpringBoot 关于Mvc的自动配置！</p><ol><li>所有mvc相关的配置都在 WebMvcAutoConfiguration （视图解析器、静态资源过滤！）</li><li>addResourceHandlers 静态资源处理方法<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 禁用默认规则的一个配置，如果你手动的添加了资源映射路径的配置,那么这些自动配置就会直接失</span></span><br><span class="line">效！</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// 缓存控制</span></span><br><span class="line">  Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">  CacheControl cacheControl =</span><br><span class="line"><span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">  <span class="comment">// 分析源代码，需要掌握看对象的方法调用！</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">  </span><br><span class="line"> customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                     </span><br><span class="line">.addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                     </span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 获取静态资源路径！</span></span><br><span class="line">  String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">  <span class="comment">// localhost:8080/</span></span><br><span class="line">  <span class="comment">// 如果访问映射的路径是 staticPathPattern = "/**";</span></span><br><span class="line">  <span class="comment">// this.resourceProperties.getStaticLocations())</span></span><br><span class="line">  <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">    customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/**"</span>)</span><br><span class="line">                     </span><br><span class="line">.addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLoca</span><br><span class="line">tions()))</span><br><span class="line">                     </span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="什么是-webjars"><a href="#什么是-webjars" class="headerlink" title="什么是 webjars"></a>什么是 webjars</h1><a href="https://www.webjars.org/" target="_blank" rel="noopener">官方网址</a><br><a href="https://tvax3.sinaimg.cn/large/005DJQmOgy1gd46hqdafdj310z0jt75p.jpg" data-fancybox="group" data-caption="webjars" class="fancybox"><img alt="webjars" title="webjars" data-src="https://tvax3.sinaimg.cn/large/005DJQmOgy1gd46hqdafdj310z0jt75p.jpg" class="lazyload"></a></li></ol><p><strong><em>简单的说就是使用maven，用jar包的方式引入前端静态资源。</em></strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>根据源码分析：<ul><li>当我们访问localhost:8080/webjars/jquery.js时</li><li>判断是否存在一个映射路径 /webjars/**，</li><li>addResourceHandler 处理逻辑 /webjars/a.js</li><li>addResourceLocations 处理资源的地址 classpath:/META-INF/resources/webjars/a.js<br><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gd46xble4fj311g0bb7h2.jpg" data-fancybox="group" data-caption="webjars-jquery" class="fancybox"><img alt="webjars-jquery" title="webjars-jquery" data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gd46xble4fj311g0bb7h2.jpg" class="lazyload"></a></li></ul></li><li>网址访问一下，发现是可以访问成功了，那么现在回过头看源码就显得清晰多了<br><a href="https://tva2.sinaimg.cn/large/005DJQmOgy1gd47b0ujhoj30n30k8q3b.jpg" data-fancybox="group" data-caption="sucess-webjars" class="fancybox"><img alt="sucess-webjars" title="sucess-webjars" data-src="https://tva2.sinaimg.cn/large/005DJQmOgy1gd47b0ujhoj30n30k8q3b.jpg" class="lazyload"></a><h1 id="静态资源映射基本规则"><a href="#静态资源映射基本规则" class="headerlink" title="静态资源映射基本规则"></a>静态资源映射基本规则</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// localhost:8080/</span></span><br><span class="line">  <span class="comment">// 如果访问映射的路径是 staticPathPattern = "/**";</span></span><br><span class="line">  <span class="comment">// this.resourceProperties.getStaticLocations())</span></span><br><span class="line">  <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">    customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/**"</span>)</span><br><span class="line">                     </span><br><span class="line">.addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLoca</span><br><span class="line">tions()))</span><br><span class="line">                     </span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>如图尝试点源码的步骤，<br><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gd480u3541j30r709jwmj.jpg" data-fancybox="group" data-caption="addResourceHandlers2" class="fancybox"><img alt="addResourceHandlers2" title="addResourceHandlers2" data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gd480u3541j30r709jwmj.jpg" class="lazyload"></a><br><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gd481ax2vbj30no0b0n4s.jpg" data-fancybox="group" data-caption="addResourceHandler3" class="fancybox"><img alt="addResourceHandler3" title="addResourceHandler3" data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gd481ax2vbj30no0b0n4s.jpg" class="lazyload"></a><br><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gd481o5ylpj30oh09w100.jpg" data-fancybox="group" data-caption="addResourceHandler4" class="fancybox"><img alt="addResourceHandler4" title="addResourceHandler4" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gd481o5ylpj30oh09w100.jpg" class="lazyload"></a><br><a href="https://tvax3.sinaimg.cn/large/005DJQmOgy1gd481yatt2j30v208bwlk.jpg" data-fancybox="group" data-caption="addResourceHandlers5" class="fancybox"><img alt="addResourceHandlers5" title="addResourceHandlers5" data-src="https://tvax3.sinaimg.cn/large/005DJQmOgy1gd481yatt2j30v208bwlk.jpg" class="lazyload"></a><br>得到一个结论<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"classpath:/META-INF/resources/"</span>, <span class="comment">// 在 starter 中使用！ SWAGGER-UI</span></span><br><span class="line"><span class="string">"classpath:/resources/"</span>,  <span class="comment">// 文件资源</span></span><br><span class="line"><span class="string">"classpath:/static/"</span>,   <span class="comment">// 静态资源</span></span><br><span class="line"><span class="string">"classpath:/public/"</span>    <span class="comment">// 公共的，图标......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></li><li>我们如果配置了自己的资源映射目录，一切原来的配置就是失效！</li><li>一旦自己定义了静态文件夹的路径！就使用自己的即可！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="springBoot" scheme="https://dakuzai.ml/categories/springBoot/"/>
    
    
      <category term="spring" scheme="https://dakuzai.ml/tags/spring/"/>
    
      <category term="springMvc" scheme="https://dakuzai.ml/tags/springMvc/"/>
    
      <category term="web" scheme="https://dakuzai.ml/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>编写一个start启动器</title>
    <link href="https://dakuzai.ml/2020/03/18/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E5%90%AF%E5%8A%A8%E5%99%A8/"/>
    <id>https://dakuzai.ml/2020/03/18/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E5%90%AF%E5%8A%A8%E5%99%A8/</id>
    <published>2020-03-18T17:46:28.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>了解了一些SpringBoot的多环境配置、自动配置等原理，为了加深印象和理解，我们自己写一个start启动器</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>构建两个项目，一个是start，autoconfigure，（Maven、SpringBoot模块都行，名字自定，但最好以xxx-spring-boot-starter、xxx-spring-boot-starter-autoconfigure，xxx为你喜欢的名字）；</p></li><li><p>编写两个项目的pom.xml</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdatademo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dakuzai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dakuzai-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    在自己的启动器中导入自己编写的自动配置类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dakuzai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dakuzai-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dakuzai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dakuzai-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dakuzai-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>具体业务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dakuzai.properties.HelloProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springdatademo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 具体业务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: dakuzai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-18 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入配置类HelloProperties</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+name+helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>xxxproperties</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springdatademo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 封装配置文件的相关属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: dakuzai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-18 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//关联配置文件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"dakuzai.hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>xxxAutoconfigure</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.configure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dakuzai.properties.HelloProperties;</span><br><span class="line"><span class="keyword">import</span> com.dakuzai.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: springdatademo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自动配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: dakuzai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-18 16:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span><span class="comment">//只有在web项目下才会生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloServiceAutoconfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService helloService = <span class="keyword">new</span> HelloService();</span><br><span class="line">        helloService.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>将启动类放到META-INF/spring.factories</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line"># HelloServiceAutoconfiguration 你的配置类</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">com.dakuzai.configure.HelloServiceAutoconfiguration</span><br></pre></td></tr></table></figure></div></li><li><p>将自己编写的自动配置安装到自己的Maven仓库（两个项目都要install）<br><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gcy8tzmh7ej30yh0jxe04.jpg" data-fancybox="group" data-caption="install-spring-boot-autoconfigure" class="fancybox"><img alt="install-spring-boot-autoconfigure" title="install-spring-boot-autoconfigure" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gcy8tzmh7ej30yh0jxe04.jpg" class="lazyload"></a></p></li><li><p>新建一个项目，如下图，在pom.xml中导入自己的启动器，再写一个controller测试即可。<br><a href="https://tvax3.sinaimg.cn/large/005DJQmOgy1gcy8wa0p2aj317u0m21kx.jpg" data-fancybox="group" data-caption="test-spring-boot" class="fancybox"><img alt="test-spring-boot" title="test-spring-boot" data-src="https://tvax3.sinaimg.cn/large/005DJQmOgy1gcy8wa0p2aj317u0m21kx.jpg" class="lazyload"></a><br><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gcy90aeuluj30m20aya9y.jpg" data-fancybox="group" data-caption="success-spring-boot" class="fancybox"><img alt="success-spring-boot" title="success-spring-boot" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gcy90aeuluj30m20aya9y.jpg" class="lazyload"></a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://dakuzai.ml/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot操作数据库</title>
    <link href="https://dakuzai.ml/2020/03/18/SpringBoot%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://dakuzai.ml/2020/03/18/SpringBoot%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-03-18T08:14:46.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="SpringData简介"><a href="#SpringData简介" class="headerlink" title="SpringData简介"></a>SpringData简介</h1><p>Spring 的一个子项目。用于简化数据库访问。其主要目标是使数据库的访问变得方便快捷。对于数据访问层，无论是 SQL ，NoSQL，在SpringBoot 底层都是采用 SpringData 来进行封装的！</p><p><a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener">官方网址</a><br><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gcxrtcyky9j313p0ehdhe.jpg" data-fancybox="group" data-caption="SpringData" class="fancybox"><img alt="SpringData" title="SpringData" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gcxrtcyky9j313p0ehdhe.jpg" class="lazyload"></a></p><h1 id="IDEA选择SpringData"><a href="#IDEA选择SpringData" class="headerlink" title="IDEA选择SpringData"></a>IDEA选择SpringData</h1><p><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gcxs9vflgyj316l0gqwfo.jpg" data-fancybox="group" data-caption="IDEA-SpringData" class="fancybox"><img alt="IDEA-SpringData" title="IDEA-SpringData" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gcxs9vflgyj316l0gqwfo.jpg" class="lazyload"></a></p><ul><li><p>Spring JDBC和SpringData JDBC对比<br><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gcxtcphusxj30tk0a0115.jpg" data-fancybox="group" data-caption="Spring-JDBC" class="fancybox"><img alt="Spring-JDBC" title="Spring-JDBC" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gcxtcphusxj30tk0a0115.jpg" class="lazyload"></a><br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcxtcymlegj30rb08x45g.jpg" data-fancybox="group" data-caption="SpringData-JDBC" class="fancybox"><img alt="SpringData-JDBC" title="SpringData-JDBC" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcxtcymlegj30rb08x45g.jpg" class="lazyload"></a></p></li><li><p><strong><em>IDEA连接数据库时会报一个serverTimezone的错误：原因就是MySQL驱动版本：8.x需要配置时区，5.x不需要</em></strong> </p><ul><li>方案一：每次新建连接数据库都要设置<br><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gcxu5kuvr4j30j70k8wmw.jpg" data-fancybox="group" data-caption="IDEA连接Mysql" class="fancybox"><img alt="IDEA连接Mysql" title="IDEA连接Mysql" data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gcxu5kuvr4j30j70k8wmw.jpg" class="lazyload"></a><br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcxu60ctv2j30ku0g7q3w.jpg" data-fancybox="group" data-caption="errro-serverTimezone" class="fancybox"><img alt="errro-serverTimezone" title="errro-serverTimezone" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcxu60ctv2j30ku0g7q3w.jpg" class="lazyload"></a><br><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gcxu6ab0cwj30li0c9js7.jpg" data-fancybox="group" data-caption="serverTimezone" class="fancybox"><img alt="serverTimezone" title="serverTimezone" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gcxu6ab0cwj30li0c9js7.jpg" class="lazyload"></a><br><a href="https://tvax3.sinaimg.cn/large/005DJQmOgy1gcxu6jmnw3j30m80j6wg2.jpg" data-fancybox="group" data-caption="success-serverTimezone" class="fancybox"><img alt="success-serverTimezone" title="success-serverTimezone" data-src="https://tvax3.sinaimg.cn/large/005DJQmOgy1gcxu6jmnw3j30m80j6wg2.jpg" class="lazyload"></a></li><li>方案二：win+r 登录MySQL</li></ul><ol><li>查询当前时区<br>SELECT @@global.time_zone;<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @<span class="meta">@global</span>.time_zone;</span><br><span class="line">+--------------------+</span><br><span class="line">| @<span class="meta">@global</span>.time_zone |</span><br><span class="line">+--------------------+</span><br><span class="line">| SYSTEM |</span><br><span class="line">+--------------------+</span><br><span class="line">##显示 SYSTEM 说明当前使用的是操作系统时区，</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @<span class="meta">@global</span>.system_time_zone;</span><br><span class="line">+---------------------------+</span><br><span class="line">| @<span class="meta">@global</span>.system_time_zone |</span><br><span class="line">+---------------------------+</span><br><span class="line">| UTC                       |</span><br><span class="line">+---------------------------+</span><br><span class="line">##显示 UTC 说明当前使用的是utc时间</span><br></pre></td></tr></table></figure></div></li><li>设置为东八区时区<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">set global time_zone = <span class="string">'+8:00'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></div></li><li>重新查询当前时区<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @<span class="meta">@global</span>.time_zone;</span><br><span class="line">+--------------------+</span><br><span class="line">| @<span class="meta">@global</span>.time_zone |</span><br><span class="line">+--------------------+</span><br><span class="line">| +<span class="number">08</span>:<span class="number">00</span>             |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="number">1</span> <span class="function">row in <span class="title">set</span> <span class="params">(<span class="number">0.00</span> sec)</span></span></span><br></pre></td></tr></table></figure></div></li><li>exit 退出当前MySQL</li></ol></li><li><p>自动配置核心类</p><ul><li>DataSourceConfiguration 自动配置的数据源；</li><li>DataSourceAutoConfiguration 自动配置类；</li><li>DataSourceProperties 配置文件绑定！</li></ul></li><li><p>测试<br><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gcxvlwgj2ej30vf0hj7lh.jpg" data-fancybox="group" data-caption="HikariDataSource" class="fancybox"><img alt="HikariDataSource" title="HikariDataSource" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gcxvlwgj2ej30vf0hj7lh.jpg" class="lazyload"></a></p></li><li><p><strong>CRUD：JdbcTemplate</strong><br>使用xxxTemplate引擎模板，真香！<br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcxwy6uqknj30sx0ibto8.jpg" data-fancybox="group" data-caption="CRUD" class="fancybox"><img alt="CRUD" title="CRUD" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcxwy6uqknj30sx0ibto8.jpg" class="lazyload"></a></p></li><li><p>HikariDataSource和Druid的区别</p><p>  HikariDataSource 号称当前 Java Web速度最快的数据源，和 Druid相比，效率会更高一点！<br>  不同的数据源拥有不同的配置；</p><h1 id="集成Druid"><a href="#集成Druid" class="headerlink" title="集成Druid"></a>集成Druid</h1></li><li><p><strong>简介</strong><br>Java程序很大的一部分都是要操作数据库的，为了提高操作数据库的性能，所以一般会使用连接池！</p><ul><li>Druid 是阿里巴巴的开源组件之一，结合了C3P0，DBCP的优点，并且自带日志监控！</li><li>Druid 可以天然的监控 SQL 和 数据库连接池的状况！</li><li>配置参数<br><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">Github网址</a><blockquote><p>任何池化技术，道理都是想通的，配置参数达到更高的性能，思考的时候对比我们之前学习的线程池！</p></blockquote></li></ul></li><li><p><strong>导入依赖</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.1.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div></li><li><p><strong>配置数据源</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    #?serverTimezone=UTC解决时区的报错</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    #Spring Boot 默认是不注入这些属性值的，需要自己绑定</span><br><span class="line">    #druid 数据源专有配置</span><br><span class="line">    initialSize: <span class="number">5</span></span><br><span class="line">    minIdle: <span class="number">5</span></span><br><span class="line">    maxActive: <span class="number">20</span></span><br><span class="line">    maxWait: <span class="number">60000</span></span><br><span class="line">    timeBetweenEvictionRunsMillis: <span class="number">60000</span></span><br><span class="line">    minEvictableIdleTimeMillis: <span class="number">300000</span></span><br><span class="line">    validationQuery: SELECT <span class="number">1</span> FROM DUAL</span><br><span class="line">    testWhileIdle: <span class="keyword">true</span></span><br><span class="line">    testOnBorrow: <span class="keyword">false</span></span><br><span class="line">    testOnReturn: <span class="keyword">false</span></span><br><span class="line">    poolPreparedStatements: <span class="keyword">true</span></span><br><span class="line">    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span><br><span class="line">    #如果允许时报错 java.lang.ClassNotFoundException: org.apache.log4j.Priority</span><br><span class="line">    #则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span><br><span class="line">    filters: stat,wall,log4j</span><br><span class="line">    maxPoolPreparedStatementPerConnectionSize: <span class="number">20</span></span><br><span class="line">    useGlobalDataSourceStat: <span class="keyword">true</span></span><br><span class="line">    connectionProperties: druid.stat.mergeSql=<span class="keyword">true</span>;druid.stat.slowSqlMillis=<span class="number">500</span></span><br></pre></td></tr></table></figure></div></li><li><p><strong>配置数据日志监控！</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="comment">// 自己定义的 DruidConfig</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">// .... @Bean</span></span><br><span class="line">  <span class="comment">// 绑定配置的bean</span></span><br><span class="line">  <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDateSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// 注册后台监控页面。SpringBoot 如何注册Servlet</span></span><br><span class="line">  <span class="comment">// 没有web.xml 的情况配置 Servlet 的方法 ： ServletRegistrationBean</span></span><br><span class="line">  <span class="comment">// 测试访问 /druid</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// StatViewServlet 配置后台监控</span></span><br><span class="line">    ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span></span><br><span class="line">StatViewServlet(),<span class="string">"/druid/*"</span>);</span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//后台的登录用户名和密码</span></span><br><span class="line">    map.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">    map.put(<span class="string">"loginPassword"</span>,<span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">// 访问权限</span></span><br><span class="line">    <span class="comment">// map.put("allow","localhost"); //只允许本机访问</span></span><br><span class="line">    map.put(<span class="string">"allow"</span>,<span class="string">""</span>); <span class="comment">// 所有人都可以访问</span></span><br><span class="line">    <span class="comment">// deny拒绝访问</span></span><br><span class="line">    <span class="comment">// map.put("deny","192.168.1146.137"); // ip会被拒绝访问</span></span><br><span class="line">    bean.setInitParameters(map); <span class="comment">//设置servlet的初始化参数</span></span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// 过滤器的配置，看看哪些请求需要被过滤</span></span><br><span class="line">  <span class="comment">// 没有web.xml 的情况配置 Filter 的方法！ FilterRegistrationBean</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">    <span class="comment">// 配置内容</span></span><br><span class="line">    <span class="comment">// 配置哪些请求可以被过滤！</span></span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">    bean.setInitParameters(map);</span><br><span class="line">    bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p><strong>测试</strong><br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcxzwc5nq8j30yb0f3glw.jpg" data-fancybox="group" data-caption="druid-login" class="fancybox"><img alt="druid-login" title="druid-login" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcxzwc5nq8j30yb0f3glw.jpg" class="lazyload"></a><br><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gcxzx00milj30wu0ljwfv.jpg" data-fancybox="group" data-caption="success-druid" class="fancybox"><img alt="success-druid" title="success-druid" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gcxzx00milj30wu0ljwfv.jpg" class="lazyload"></a></p><h1 id="集成MyBatis"><a href="#集成MyBatis" class="headerlink" title="集成MyBatis"></a>集成MyBatis</h1></li><li><p>官方文档</p><ul><li><a href="https://mybatis.org/mybatis-3/getting-started.html" target="_blank" rel="noopener">MyBatis</a></li><li><a href="http://mybatis.org/spring/zh/factorybean.html" target="_blank" rel="noopener">MyBatis-Spring</a></li><li><a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">MyBatis Spring Boot Starter</a></li></ul></li></ul><ol><li>导入依赖<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;!--mybatis</span> <span class="string">是自己写的启动器不是官方的--&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;2.1.1&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>编写实体类<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span> <span class="comment">// 表示这是一个MyBatis的Mapper</span></span><br><span class="line"><span class="meta">@Repository</span>  <span class="comment">// dao层使用的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line">  <span class="comment">// @Select("sql") 注解版配置</span></span><br><span class="line">  <span class="comment">// 获取所有的部门信息</span></span><br><span class="line">  <span class="function">List&lt;Department&gt; <span class="title">getDepartments</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">// 通过id获取部门信息</span></span><br><span class="line">  <span class="function">Department <span class="title">getDepartment</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>编写Mapper.xml文件<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dakuzai.mapper.DepartmentMapper"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--绑定接口中的方法--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDepartments"</span> <span class="attr">resultType</span>=<span class="string">"Department"</span>&gt;</span></span><br><span class="line">   select * from department</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDepartment"</span> <span class="attr">resultType</span>=<span class="string">"Department"</span>&gt;</span></span><br><span class="line">   select * from department where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li>测试<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  DepartmentMapper departmentMapper;</span><br><span class="line">  <span class="comment">// 查询全部部门</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/getDepartments"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Department&gt; <span class="title">getDepartments</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> departmentMapper.getDepartments();</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">// 通过id获取部门信息</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/getDepartment/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> departmentMapper.getDepartment(id);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>配置mybatis的配置项<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 配置mybatis的配置</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class="line">mybatis.type-aliases-package=com.coding.pojo</span><br><span class="line"># mybatis.config-location=</span><br><span class="line">mybatis.mapper-locations=classpath:com/dakuzai/mapper/xml/*.xml</span><br></pre></td></tr></table></figure></div></li><li>Maven资源过滤问题<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置文件导出 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1></li></ol><ul><li>使用第三方数据源的思想<ol><li>导入依赖</li><li>看源码配置</li><li>看官方解释</li><li>测试使用！</li></ol></li><li>MyBatis 使用<ol><li>导入依赖</li><li>编写mybatis配置文件</li><li>编写接口</li><li>编写接口Mapper配置文件</li><li>注册Mapper配置文件</li><li>测试</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/categories/SpringBoot/"/>
    
      <category term="SpringData" scheme="https://dakuzai.ml/categories/SpringBoot/SpringData/"/>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://dakuzai.ml/tags/Spring/"/>
    
      <category term="SpringData" scheme="https://dakuzai.ml/tags/SpringData/"/>
    
      <category term="Druid" scheme="https://dakuzai.ml/tags/Druid/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot原理探究</title>
    <link href="https://dakuzai.ml/2020/03/15/SpringBoot%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
    <id>https://dakuzai.ml/2020/03/15/SpringBoot%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</id>
    <published>2020-03-15T11:58:07.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="诞生的原因"><a href="#诞生的原因" class="headerlink" title="诞生的原因"></a>诞生的原因</h1><p>谈起SprigBoot，就一句话：真香！为什么这么说呢，那就要从Spring的发展史说起了。<a href="https://spring.io/projects/spring-boot/" target="_blank" rel="noopener">SpringBoot官网</a></p><h3 id="1-发展史"><a href="#1-发展史" class="headerlink" title="1. 发展史"></a>1. 发展史</h3><ul><li>Spring的创始人是Rod Johnson，他是一个音乐界的跨界大佬，故此，Spring框架整体显得十分优雅。</li><li>Spring是一个<strong><em>开源框架</em></strong>，为了解决企业应用开发的复杂性而创建的。故它是一个轻量级的控制反转(IOC)和面向切面编程（AOP）的容器框架。<ul><li>从大小与开销两方面而言Spring都是轻量级的；</li><li>通过控制反转(IoC)的技术达到松耦合的目的。控制反转的思想就是<strong><em>我们所有的对象都去容器中get即可</em></strong>；</li><li>提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务进行内聚性的开发；</li><li>包含并管理应用对象(Bean)的配置和生命周期，这个意义上是一个容器；</li><li>将简单的组件配置、组合成为复杂的应用，这个意义上是一个框架。</li></ul></li><li>Spring框架是一个<strong><em>分层架构</em></strong>，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式，如图<br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcuoowk8lqj30qi0dxwey.jpg" data-fancybox="group" data-caption="Spring" class="fancybox"><img alt="Spring" title="Spring" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcuoowk8lqj30qi0dxwey.jpg" class="lazyload"></a><br>组成Spring框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</li></ul><ol><li><strong>核心容器</strong>：核心容器提供 Spring框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li><li><strong>Spring 上下文</strong>：Spring上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li><li><strong>Spring AOP</strong>：通过配置管理特性，Spring AOP模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使Spring框架管理的任何对象支持AOP。Spring AOP模块为基于Spring的应用程序中的对象提供了事务管理服务。通过使用Spring AOP,不用依赖EJB组件，就可以将声明性事务管理集成到应用程序中。</li><li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO的面向JDBC的异常遵从通用的 DAO 异常层次结构。</li><li><strong>Spring ORM</strong>：Spring框架插入了若干个ORM框架，从而提供了ORM的对象关系工具，其中包括JDO、Hibernate和iBatis SQL Map。所有这些都遵从 Spring的通用事务和DAO异常层次结构。</li><li><strong>Spring Web 模块</strong>：Web上下文模块建立在应用程序上下文模块之上，为基于Web的应用程序提供了上下文。所以，Spring框架支持与Jakarta Struts的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li><li><strong>Spring MVC 框架</strong>：MVC框架是一个全功能的构建 Web 应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的，MVC容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li></ol><p>上文大部分絮叨了Spring的基础知识，但是促使SpringBoot诞生的原因肯定不是这些啦，当然是因为开发效率啦（毕竟为了“懒惰”是促进人类发展的捷径嘛），传统的开发框架（SSH、SSM）为了简化一些固有的开发，会使用大量的配置文件，但是在开发过程中，管理这些配置文件会占用很多开发时间，所以，若是“自动配置能实现就好啦”这个想法就产生了。在Java世界——天上飞的，总有落地实现的一天。这个时候SpringBoot应运而生。</p><h1 id="SpringBoot的基本思想"><a href="#SpringBoot的基本思想" class="headerlink" title="SpringBoot的基本思想"></a>SpringBoot的基本思想</h1><ul><li>自动配置；</li><li>Spring的增强版本；</li><li>约定大于配置（maven）；</li><li>集成了市面上所有的常用的依赖（而且帮你自动管理版本依赖）</li><li>内置web容器<h1 id="欢迎进入SpringBoot的殿堂"><a href="#欢迎进入SpringBoot的殿堂" class="headerlink" title="欢迎进入SpringBoot的殿堂"></a>欢迎进入SpringBoot的殿堂</h1><h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml"></a><strong>1.pom.xml</strong></h2>分析思路：只要是Maven项目都先分析 pom.xml</li><li>1、进去就有一个父依赖<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;    </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    </span><br><span class="line">    &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;    </span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; </span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure></div></li><li>2、父依赖作用分析：资源过滤。插件管理<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--发现未知文件 yml--&gt;</span><br><span class="line"> &lt;includes&gt;    </span><br><span class="line">     &lt;include&gt;**/application*.yml&lt;/include&gt;   </span><br><span class="line">     &lt;include&gt;**/application*.yaml&lt;/include&gt;   </span><br><span class="line">     &lt;include&gt;**/application*.properties&lt;/include&gt; </span><br><span class="line"> &lt;/includes&gt;</span><br></pre></td></tr></table></figure></div></li><li>3、我们发现它还有一个父依赖<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--父依赖spring-boot-dependencies SpringBoot 版本依赖控制--&gt;</span><br><span class="line"> &lt;parent&gt;    </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;   </span><br><span class="line">    &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;   </span><br><span class="line">    &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure></div>这才是真正的版本控制中心！以后我们导入的依赖几乎都不用编写版本号，如果自动依赖配置中不存在，我们才需要手动导入版本！ 如果存在就不管了</li><li>4、启动器<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-           </span><br><span class="line">spring-boot-starter : SpringBoot 启动器            </span><br><span class="line">作用：                </span><br><span class="line"><span class="number">1</span>、导入所有的依赖                </span><br><span class="line"><span class="number">2</span>、spring-boot-starter-xxx 后面的xxx就是对应的场景依赖；                </span><br><span class="line"><span class="number">3</span>、存在哪些 spring-boot-starter https:<span class="comment">//docs.spring.io/springboot/docs/2.2.5.RELEASE/reference/html/using-spring-boot.html#using-boot-starter    </span></span><br><span class="line">--&gt; </span><br><span class="line">&lt;dependency&gt;    </span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt; </span><br><span class="line">&lt;!--</span><br></pre></td></tr></table></figure></div>spring-boot-starter-xxx ： 对应不同的场景启动器 </li></ul><p>spring-boot-starter-web： 导入了web模块运行所需要的全部场景依赖！</p><ul><li><p>5、插件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 插件 --&gt; </span><br><span class="line">&lt;build&gt;    </span><br><span class="line">    &lt;plugins&gt;       </span><br><span class="line">        &lt;!--打包插件，可以将项目打成jar 或者 war包--&gt;      </span><br><span class="line">        &lt;plugin&gt;            </span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        </span><br><span class="line">        &lt;/plugin&gt;   </span><br><span class="line">    &lt;/plugins&gt; </span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></div><h2 id="2-启动类"><a href="#2-启动类" class="headerlink" title="2.启动类"></a><strong>2.启动类</strong></h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// 一个注解 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01HelloworldApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;       </span><br><span class="line">      <span class="comment">// 一个方法        </span></span><br><span class="line">     SpringApplication.run(Springboot01HelloworldApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p><strong>重要的注解解释</strong><br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcuskk93qxj30me0h0t9a.jpg" data-fancybox="group" data-caption="重要的注解" class="fancybox"><img alt="重要的注解" title="重要的注解" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gcuskk93qxj30me0h0t9a.jpg" class="lazyload"></a></p><ul><li>@SpringBootApplication<br>作用：标注了这个注解，就代表这个类使我们的一个启动类，SpringBoot 应用！<br>点进源码我们会发现<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span> </span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span> </span><br><span class="line"><span class="meta">@ComponentScan</span>() <span class="comment">// 对应xml 中的 ComponentScan 标签；</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;     </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>@ComponentScan:这个注解就是扫描包，将扫描的包中bean 注入到Spring中！</li><li>@SpringBootConﬁguration:<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 这就是个配置类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;   </span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 这是一个组件</span></span><br></pre></td></tr></table></figure></div>作用：</li></ul><ol><li>主启动类也是Spring中的一个组件 </li><li>也是一个配置类</li></ol><ul><li><p>@EnableAutoConﬁguration 重点</p><ul><li><p>@EnableAutoConﬁguration  ： 开启自动配置功能  </p></li><li><p>@AutoConﬁgurationPackage : 自动配置包，注册包的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;        </span><br><span class="line">        register(registry, <span class="keyword">new</span> PackageImport(metadata).getPackageName());   </span><br><span class="line">    &#125; &#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>AutoConﬁgurationImportSelector:自动配置导入选择器<br><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gcurq6dnpyj30vt0kzjt5.jpg" data-fancybox="group" data-caption="Snipaste_2020-03-15_18-02-38" class="fancybox"><img alt="Snipaste_2020-03-15_18-02-38" title="Snipaste_2020-03-15_18-02-38" data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gcurq6dnpyj30vt0kzjt5.jpg" class="lazyload"></a></p></blockquote><blockquote><p>在加载的时候读取配置，返回具体的结果，但是有没有生效，我们并不知道！<br><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gcusm3mgv7j30jn0ezweq.jpg" data-fancybox="group" data-caption="Snipaste_2020-03-15_18-33-22" class="fancybox"><img alt="Snipaste_2020-03-15_18-33-22" title="Snipaste_2020-03-15_18-33-22" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gcusm3mgv7j30jn0ezweq.jpg" class="lazyload"></a></p></blockquote></li></ul></li></ul></li><li><p><strong>SpringApplication</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;...</span></span></span><br><span class="line"><span class="function"><span class="params">primarySources)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1、推断当前引用的类型，是否是Web应用</span></span><br><span class="line">  <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">  <span class="comment">// 2、加载初始化器</span></span><br><span class="line">  setInitializers((Collection)</span><br><span class="line">getSpringFactoriesInstances(ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">  <span class="comment">// 3、设置监听器</span></span><br><span class="line">  setListeners((Collection)</span><br><span class="line">getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">  <span class="comment">// 4、推断 mian方法</span></span><br><span class="line">  <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>作用：</p></li></ul><ol><li>推断当前引用的类型，是否为web应用</li><li>加载初始化器</li><li>设置监听器</li><li>推断 mian方法</li></ol><ul><li>Run方法<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">  StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">  stopWatch.start();</span><br><span class="line">  ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">  Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;</span><br><span class="line">();</span><br><span class="line">  configureHeadlessProperty();</span><br><span class="line">  <span class="comment">// 1、监听器启动</span></span><br><span class="line">  SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">  listeners.starting();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ApplicationArguments applicationArguments = <span class="keyword">new</span></span><br><span class="line">DefaultApplicationArguments(args);</span><br><span class="line">    <span class="comment">// 初始化环境配置</span></span><br><span class="line">    ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">applicationArguments);</span><br><span class="line">    configureIgnoreBeanInfo(environment);</span><br><span class="line">    <span class="comment">// 打印 Banner</span></span><br><span class="line">    Banner printedBanner = printBanner(environment);</span><br><span class="line">    <span class="comment">// 创建上下文</span></span><br><span class="line">    context = createApplicationContext();</span><br><span class="line">    exceptionReporters =</span><br><span class="line">getSpringFactoriesInstances(SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">                            new Class[] &#123;</span><br><span class="line">ConfigurableApplicationContext<span class="class">.<span class="keyword">class</span> &#125;, <span class="title">context</span>)</span>;</span><br><span class="line">    prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">printedBanner);</span><br><span class="line">    refreshContext(context);</span><br><span class="line">    afterRefresh(context, applicationArguments);</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">      <span class="keyword">new</span></span><br><span class="line">StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(),</span><br><span class="line">stopWatch);</span><br><span class="line">   &#125;</span><br><span class="line">    listeners.started(context);</span><br><span class="line">    callRunners(context, applicationArguments);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    listeners.running(context);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>Run方法思维参考图（特别感谢“狂神说”公众号）：<br><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gcutwrd2juj30ls0k60xv.jpg" data-fancybox="group" data-caption="run方法思维参考图" class="fancybox"><img alt="run方法思维参考图" title="run方法思维参考图" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gcutwrd2juj30ls0k60xv.jpg" class="lazyload"></a></li><li>注入配置文件(@ConfigurationProperties)  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@ConfigurationProperties</span></span></span><br><span class="line"><span class="comment">* 作用：</span></span><br><span class="line"><span class="comment">* 1、绑定配置文件中的对象</span></span><br><span class="line"><span class="comment">* 2、将对象的属性值和配置文件的值一一对应，然后注入</span></span><br><span class="line"><span class="comment">* 3、这是一种批量注入的方式，更加快捷和方便，推荐使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 思想：</span></span><br><span class="line"><span class="comment">* 我们编写的配置文件如果存在值，就使用配置文件中的值</span></span><br><span class="line"><span class="comment">* 如果不存在，就是默认值或者null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div><ul><li>自动配置原理<br><a href="https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">官方文档</a><ul><li>@ConditionalOnXX 条件判断注解，通过条件来判断这个类是否生效！<br><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gcuu6y2b9tj30w20jw7bl.jpg" data-fancybox="group" data-caption="ConditionalOnXX" class="fancybox"><img alt="ConditionalOnXX" title="ConditionalOnXX" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gcuu6y2b9tj30w20jw7bl.jpg" class="lazyload"></a></li><li><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Configuration 表示这是一个配置类，和以前编写的配置文件一样！</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="comment">// 指定配置文件，HttpProperties 对应我们编写的配置文件，假设配置文件中有就有配置文件的，没有</span></span><br><span class="line">就用默认值</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">// @<span class="title">ConditionalOnXX</span> <span class="title">Spring</span>底层注解；</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="comment">// 如果 CharacterEncodingFilter 这个类，这个配置类才生效！</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>,</span><br><span class="line">matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注入绑定 HttpProperties 配置文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注入对应的bean</span></span><br><span class="line"><span class="comment">// 如果自己配置了配置文件，就会注入到SpringBoot自动帮我们配置的bean中！</span></span><br><span class="line"><span class="comment">// 注册bean的时候，SpringBoot自动帮我们关联了 HttpProperties</span></span><br><span class="line"><span class="comment">// 我们编写的配置就可以直接生效！</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">    filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">    filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleCharsetMappingsCustomizer <span class="title">localeCharsetMappingsCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocaleCharsetMappingsCustomizer(<span class="keyword">this</span>.properties);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleCharsetMappingsCustomizer</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span></span></span><br><span class="line"><span class="class"><span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line">LocaleCharsetMappingsCustomizer(HttpProperties.Encoding properties) &#123;</span><br><span class="line">    <span class="keyword">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.properties.getMapping() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        factory.setLocaleCharsetMappings(<span class="keyword">this</span>.properties.getMapping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>小结：</p></blockquote></li></ul><ol><li>SpringBoot启动会加载大量的自动配置类！spring.factories</li><li>我们就需要判断我们的类是否存在在这里面，如果不存在我们需要手动导入，如果存在导入启动器即可！</li><li>我们的配置文件之所以可以自动配置生效：xxxxAutoConfiguation ： 自动配置类，根据条件 @ConditionalOnXX 判断是否生效；如果生效则成功注入bean；<br>xxxxProperties：封装配置文件中的相关属性；</li><li>给容器中自动配置类配置属性的时候，会通过 xxxxProperties 类来获取某用户配置文件中的属性，如果没有则使用默认的，如果有则使用 自动配置的！</li><li>SpringBoot封装了配置，而不是去除了配置。</li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://dakuzai.ml/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://dakuzai.ml/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>锁之8锁</title>
    <link href="https://dakuzai.ml/2020/03/14/%E9%94%81%E4%B9%8B8%E9%94%81/"/>
    <id>https://dakuzai.ml/2020/03/14/%E9%94%81%E4%B9%8B8%E9%94%81/</id>
    <published>2020-03-14T20:09:26.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="利用8道先执行发送邮件方法还是发送短信方法的题，搞定锁这个概念！"><a href="#利用8道先执行发送邮件方法还是发送短信方法的题，搞定锁这个概念！" class="headerlink" title="利用8道先执行发送邮件方法还是发送短信方法的题，搞定锁这个概念！"></a>利用8道先执行发送邮件方法还是发送短信方法的题，搞定锁这个概念！</h1><ol><li>标准的访问情况下，先执行 sendEmail 还是 sendSMS<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.lockDemoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendEmail();</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(200);</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSMS();</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//资源类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sendEmail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sendSMS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>小结</p></blockquote><ul><li>答案：执行sendEmail方法</li><li>原因：被 synchronized 修饰的方式，锁的对象是方法的调用者，所以说这里两个方法调用的对象是同一个，先调用的先执行！</li></ul></li><li>sendEmail休眠3秒后 ，先执行 sendEmail 还是 sendSMS<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.lockDemoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Phone2 phone = <span class="keyword">new</span> Phone2();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(200);</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSMS();</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"sendEmail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sendSMS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>小结：</p></blockquote><ul><li>答案：执行sendEmail方法</li><li>原因：被 synchronized 修饰的方式，锁的对象是方法的调用者，所以说这里两个方法调用的对象是同一个，先调用的先执行！</li></ul></li><li>增加一个普通方法，请问先打印那个 sendEmail 还是 hello<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.lockDemoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Phone3 phone = <span class="keyword">new</span> Phone3();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(200);</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.hello();</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">"sendEmail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有 synchronized 没有 static 就是普通方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>小结：</p></blockquote><ul><li>答案：执行hello方法</li><li>原因：新增加的这个方法没有 synchronized 修饰，不是同步方法，不受锁的影响！</li></ul></li><li>两个手机(对象)，请问先执行sendEmail 还是 sendSMS<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.lockDemoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Phone4 phone1 = <span class="keyword">new</span> Phone4();</span><br><span class="line">        Phone4 phone2 = <span class="keyword">new</span> Phone4();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone1.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(200);</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone2.sendSMS();</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone4</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"sendEmail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sendSMS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>小结：</p></blockquote><ul><li>答案：执行sendSMS方法</li><li>原因：被 synchronized  修饰的方式，锁的对象是调用者；我们这里有两个调用者，两个方法在这里是两个锁</li></ul></li><li>两个静态同步方法，同一个手机请问先执行sendEmail 还是 sendSMS<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.lockDemoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Phone5 phone = <span class="keyword">new</span> Phone5();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(200);</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSMS();</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone5</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"sendEmail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sendSMS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>小结</p></blockquote><ul><li>答案：执行sendEmail方法</li><li>原因：只要方法被 static 修饰，锁的对象就是 Class模板对象,这个则全局唯一！所以说这里是同一个锁，并不是因为synchronized的修饰而改变</li></ul></li><li>两个静态同步方法，两个手机，请问先执行sendEmail 还是 sendSMS<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.lockDemoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Phone6 phone = <span class="keyword">new</span> Phone6();</span><br><span class="line">        Phone6 phone2 = <span class="keyword">new</span> Phone6();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(200);</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone2.sendSMS();</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone6</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"sendEmail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sendSMS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>小结：</p></blockquote><ul><li>答案：执行sendEmail方法</li><li>原因：只要方法被 static 修饰，锁的对象就是 Class模板对象,这个则全局唯一！所以说这里是同一个锁，并不是因为synchronized而改变</li></ul></li><li>一个普通同步方法，一个静态同步方法，只有一个手机，请问先执行sendEmail 还是sendSMS<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.lockDemoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Phone7 phone = <span class="keyword">new</span> Phone7();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(200);</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone.sendSMS();</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone7</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"sendEmail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sendSMS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>小结：</p></blockquote><ul><li>答案：执行sendSMS方法</li><li>原因：synchronized 锁的是这个调用的对象，static 锁的是这个类的Class模板，这里是两个锁！</li></ul></li><li>一个普通同步方法，一个静态同步方法，两个手机，请问先执行sendEmail 还是 sendSMS<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dakuzai.lockDemoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Phone8 phone = <span class="keyword">new</span> Phone8();</span><br><span class="line">        Phone8 phone2 = <span class="keyword">new</span> Phone8();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(200);</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            phone2.sendSMS();</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone8</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"sendEmail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sendSMS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>小结：</p></blockquote><ul><li>答案：执行sendSMS方法</li><li>原因：synchronized 锁的是这个调用的对象，static 锁的是这个类的Class模板，这里是两个锁！</li></ul></li></ol><blockquote><p>总结</p></blockquote><ol><li><p>new + this        调用的这个对象，是一个具体的对象！</p></li><li><p>static修饰class      唯一的一个模板！</p></li></ol><p><strong><em>在我们编写多线程程序得时候，只需要搞明白这个到底锁的是什么就不会出错了！</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="锁" scheme="https://dakuzai.ml/categories/%E9%94%81/"/>
    
      <category term="JUC" scheme="https://dakuzai.ml/categories/%E9%94%81/JUC/"/>
    
    
      <category term="锁" scheme="https://dakuzai.ml/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>垃圾回收GC</title>
    <link href="https://dakuzai.ml/2020/03/14/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6GC/"/>
    <id>https://dakuzai.ml/2020/03/14/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6GC/</id>
    <published>2020-03-14T20:08:51.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>GC（Garbage Collection）是JVM的核心组件，它在JVM中以单独的线程（daemon thread）运行，作用于内存堆区域（Stack Space），扫描那些经过new关键字创建的无用的对象并清除以释放内存，必要时整理内存。 </p><h1 id="口诀"><a href="#口诀" class="headerlink" title="口诀"></a>口诀</h1><h2 id="分代收集算法（不同的区域使用不同的算法）"><a href="#分代收集算法（不同的区域使用不同的算法）" class="headerlink" title="分代收集算法（不同的区域使用不同的算法）"></a>分代收集算法（不同的区域使用不同的算法）</h2><ul><li>Young代： GC频繁区域</li><li>Old代：GC次数较少</li><li>Perm代：不会产生GC！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://dakuzai.ml/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://dakuzai.ml/tags/JVM/"/>
    
      <category term="GC" scheme="https://dakuzai.ml/tags/GC/"/>
    
  </entry>
  
  <entry>
    <title>JVM-堆与栈</title>
    <link href="https://dakuzai.ml/2020/03/14/JVM-%E5%A0%86%E4%B8%8E%E6%A0%88/"/>
    <id>https://dakuzai.ml/2020/03/14/JVM-%E5%A0%86%E4%B8%8E%E6%A0%88/</id>
    <published>2020-03-14T19:09:54.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="何为栈？栈中存哪些东西？"><a href="#何为栈？栈中存哪些东西？" class="headerlink" title="何为栈？栈中存哪些东西？"></a>何为栈？栈中存哪些东西？</h1><ul><li>简单来说栈就是管理程序运行的<blockquote><p>延申 栈和队列都是基本的数据结构；队列：FIFO（First Input First OutPut）</p></blockquote></li><li>存储一些基本类型的值，对象的引用，方法等…</li><li>栈的优势：存取速度比堆快！仅次于寄存器，栈的数据是不可以共享的；<blockquote><p>StackOverFlow</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackOverFlowTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// main  a  a  a   a a  a a a  a a  a  满</span></span><br><span class="line">    <span class="comment">// Exception in thread "main" java.lang.StackOverflowError</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>因此，栈里面是一定不会存在垃圾回收的问题的，只要线程一旦结束，该栈就Over了。生命周期和线程一致；<h1 id="何为堆？堆中存哪些东西？"><a href="#何为堆？堆中存哪些东西？" class="headerlink" title="何为堆？堆中存哪些东西？"></a>何为堆？堆中存哪些东西？</h1></li><li>堆是JVM调优的主要地方，也是GC主要工作的地方。堆的大小可以通过参数调整</li><li>数据结构：堆分三部分：新生区，养老区，永久代（jdk1.8后改成元空间）<ul><li>Java7之前：<ul><li>堆内存在逻辑上分为三个部分：新生、养老、永久</li><li>新生代 ( Young )又被划分为：Eden、From Survivor和To Survivor三个区域</li></ul></li><li>Java8之后：<ul><li>永久化为元空间!<blockquote><p><strong><em>物理上只有 新生、养老；元空间在本地内存中，不在JVM中！</em></strong></p></blockquote></li></ul></li></ul></li><li>存放：类，方法，常量，类引用的真实的内容。。。。<blockquote><p>GC 垃圾回收主要是在 新生区和养老区，又分为 普通的GC 和 Full GC，如果堆满了，就会爆出 OutOfMemory；</p></blockquote><h1 id="新生、养老、永久区"><a href="#新生、养老、永久区" class="headerlink" title="新生、养老、永久区"></a>新生、养老、永久区</h1></li><li>内存占比<ol><li>新生代( Young ) + 老年代( Old )，其可以通过参数 –Xms、-Xmx 来指定：–Xms用于设置初始分配大小，默认为物理内存的1/64；-Xmx用于设置最大分配内存，默认为物理内存的1/4。默认情况下，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小，老年代 ( Old ) = 2/3 的堆空间大小</li><li>年轻代又分为Eden和Survivor区。Survivor区由FromSpace和ToSpace组成。Eden区占大容量，Survivor两个区占小容量，默认比例是8:1:1。</li></ol></li><li>新生代：新生区 就是一个类诞生、成长、消亡的地方！<ol><li>Eden区为Java对象分配堆内存，当 Eden 区没有足够空间分配时，JVM发起一次Minor GC，将Eden区仍然存活的对象放入Survivor from区，并清空 Eden 区；</li><li>Eden区被清空后，继续为新的Java对象分配堆内存；</li><li>当Eden区再次没有足够空间分配时，JVM对Eden区和Survivor from区同时发起一次 Minor GC，把存活对象放入Survivor to区，同时清空Eden 区和Survivor from区；</li><li>Eden区继续为新的Java对象分配堆内存，并重复上述过程：Eden区没有足够空间分配时，把Eden区和某个Survivor区的存活对象放到另一个Survivor区；</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://dakuzai.ml/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://dakuzai.ml/tags/JVM/"/>
    
      <category term="堆" scheme="https://dakuzai.ml/tags/%E5%A0%86/"/>
    
      <category term="栈" scheme="https://dakuzai.ml/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>中间件之RabbitMq</title>
    <link href="https://dakuzai.ml/2020/03/13/%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BRabbitMq/"/>
    <id>https://dakuzai.ml/2020/03/13/%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8BRabbitMq/</id>
    <published>2020-03-13T21:26:42.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="RabbitMq" scheme="https://dakuzai.ml/categories/RabbitMq/"/>
    
    
      <category term="RabbitMq" scheme="https://dakuzai.ml/tags/RabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>密码加密之JWT</title>
    <link href="https://dakuzai.ml/2020/03/13/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E4%B9%8BJWT/"/>
    <id>https://dakuzai.ml/2020/03/13/%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E4%B9%8BJWT/</id>
    <published>2020-03-13T21:24:15.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JWT" scheme="https://dakuzai.ml/categories/JWT/"/>
    
    
      <category term="JWT" scheme="https://dakuzai.ml/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Lock锁</title>
    <link href="https://dakuzai.ml/2020/03/12/Lock%E9%94%81/"/>
    <id>https://dakuzai.ml/2020/03/12/Lock%E9%94%81/</id>
    <published>2020-03-12T11:21:00.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发中，我们的架构都是高内聚，低耦合的，线程是实现高内聚，低耦合的一种方式。但是，在并发下，为了达到线程的安全，我们需要给线程加锁。</p><p><strong><em>小套路：线程操纵资源类</em></strong></p><h1 id="Synchronized方法和Synchronized块"><a href="#Synchronized方法和Synchronized块" class="headerlink" title="Synchronized方法和Synchronized块"></a>Synchronized方法和Synchronized块</h1><ul><li>笔记：</li><li>代码实现：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: synchronized 锁创建卖票简单程序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: dakuzai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-12 10:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//新建资源类</span></span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="comment">//操作资源类</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.SaleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.SaleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.SaleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"C"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//资源类:属性，方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">SaleTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"卖出了"</span> + (num--) + <span class="string">"张票，还剩"</span> + num + <span class="string">"张票"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h1></li><li>笔记：</li><li>代码：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Lock 锁实现卖票</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: dakuzai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-12 11:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//新建资源类</span></span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="comment">//操作资源类</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.SaleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.SaleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.SaleTicket();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"C"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ReentrantLock：可重入锁（非公平锁）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaleTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();<span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"卖出了"</span> + (num--) + <span class="string">"张票，还剩"</span> + num + <span class="string">"张票"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();<span class="comment">//解锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><p><strong><em>小提示：</em></strong></p><ul><li><strong><em>非公平锁</em></strong><br>顾名思义就是不公平，☞线程可插队</li><li><strong><em>公平锁</em></strong><br>顾名思义就是公平，☞线程不可插队</li></ul><h1 id="Synchronized和lock的区别"><a href="#Synchronized和lock的区别" class="headerlink" title="Synchronized和lock的区别"></a>Synchronized和lock的区别</h1><ol><li><p>Synchronized是一个关键字，Lock是一个对象；</p></li><li><p>Sychonized无法尝试获取锁（A线程获得锁后如果阻塞，B线程就会一直等待），Lock锁可以尝试<br>获取锁（tryLock方法）；<br><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gcr0pxtukpj30ia036gmg.jpg" data-fancybox="group" data-caption="tryLock方法" class="fancybox"><img alt="tryLock方法" title="tryLock方法" data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gcr0pxtukpj30ia036gmg.jpg" class="lazyload"></a></p></li><li><p>Synchronized会自动释放锁（A线程结束，B线程如果异常了，也会释放锁），lock锁必须手动释放锁（unlock），否则就会死锁！</p></li><li><p>Synchronized可重复锁，一定是非公平的，但是Lock锁可以通过参数设置为公平锁；<br><a href="https://tva2.sinaimg.cn/large/005DJQmOgy1gcr0uxvfogj30n1072gq5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://tva2.sinaimg.cn/large/005DJQmOgy1gcr0uxvfogj30n1072gq5.jpg" class="lazyload"></a></p></li><li><p>Synchronized适合在代码量比较少的同步问题，Lock适合在代码量特别大的时候，可以做到精准控制。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="锁" scheme="https://dakuzai.ml/categories/%E9%94%81/"/>
    
    
      <category term="Lock" scheme="https://dakuzai.ml/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>初时JVM</title>
    <link href="https://dakuzai.ml/2020/03/11/%E5%88%9D%E6%97%B6JVM/"/>
    <id>https://dakuzai.ml/2020/03/11/%E5%88%9D%E6%97%B6JVM/</id>
    <published>2020-03-11T17:55:45.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h1><p>Java是跨平台的，JVM是运行在操作系统之上的。<br><a href="https://tva2.sinaimg.cn/large/005DJQmOgy1gcteke2gmij30o60h0gm4.jpg" data-fancybox="group" data-caption="JVM位置" class="fancybox"><img alt="JVM位置" title="JVM位置" data-src="https://tva2.sinaimg.cn/large/005DJQmOgy1gcteke2gmij30o60h0gm4.jpg" class="lazyload"></a></p><p><strong><em>架构基本思想：程序虽不能开平台，但加一层就可以实现跨平台</em></strong></p><h1 id="JVM体系架构图"><a href="#JVM体系架构图" class="headerlink" title="JVM体系架构图"></a>JVM体系架构图</h1><p><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gctdum0y4yj30jd0f3mxf.jpg" data-fancybox="group" data-caption="JVM体系架构图" class="fancybox"><img alt="JVM体系架构图" title="JVM体系架构图" data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gctdum0y4yj30jd0f3mxf.jpg" class="lazyload"></a><br><strong><em>所谓的JVM调优，99%都是在调堆，栈一定不会存在垃圾</em></strong></p><h1 id="类加载器ClassLoader"><a href="#类加载器ClassLoader" class="headerlink" title="类加载器ClassLoader"></a>类加载器ClassLoader</h1><p>先看一下图<br><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gctmytmy8uj30h20c874x.jpg" data-fancybox="group" data-caption="类加载器" class="fancybox"><img alt="类加载器" title="类加载器" data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gctmytmy8uj30h20c874x.jpg" class="lazyload"></a><br>上图所展示的就是一个类的加载，连接和初始化，接下来我会依依为大家解释它们的含义：</p><ul><li>加载：查找并加载类的二进制数据</li><li>连接：<ul><li>验证：保证被加载的类的正确性</li><li>准备：给类静态变量分配内存空间，赋值一个默认的初始值（原子性操作）</li><li>解析：把类中的符号引用转换为直接引用<ul><li>在把 .java 文件 编译为 .class 文件的时候，虚拟机并不知道所引用的地址； 助记符，符号引用；</li><li>转为真正的直接引用，找到对应的直接地址！</li></ul></li></ul></li><li>初始化：给类的静态变量赋值正确的值<h1 id="类加载器-分类"><a href="#类加载器-分类" class="headerlink" title="类加载器 分类"></a>类加载器 分类</h1></li></ul><ol><li>java虚拟机自带的加载器<ul><li>BootStrap 根加载器 （加载系统的包，JDK 核心库中的类 rt.jar）</li><li>Ext 扩展类加载器 （加载一些扩展jar包中的类）</li><li>Sys/App 系统（应用类）加载器 （我们自己编写的类）</li></ul></li><li>用户自己定义的加载器<ul><li>ClassLoader，只需要继承这个抽象类即可，自定义自己的类加载器<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">classLoaderTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object o = <span class="keyword">new</span> Object(); <span class="comment">// jdk 自带的,类的鼻祖</span></span><br><span class="line">        Car car = <span class="keyword">new</span> Car();  <span class="comment">// 实例化一个自己定义的对象</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// null 在这里并不代表没有，只是Java触及不到！</span></span><br><span class="line">        System.out.println(o.getClass().getClassLoader()); <span class="comment">// null</span></span><br><span class="line">        System.out.println(demo.getClass().getClassLoader()); <span class="comment">// AppClassLoader</span></span><br><span class="line">        System.out.println(demo.getClass().getClassLoader().getParent()); <span class="comment">// ExtClassLoader</span></span><br><span class="line">        System.out.println(demo.getClass().getClassLoader().getParent().getParent()); <span class="comment">// null</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// jvm 中有机制可以保护自己的安全；</span></span><br><span class="line">        <span class="comment">// 双亲委派机制 ： 一层一层的让父类去加载，如果顶层的加载器不能加载，然后再向下类推</span></span><br><span class="line">        <span class="comment">// ClassLoader         04</span></span><br><span class="line">        <span class="comment">// AppClassLoader      03</span></span><br><span class="line">        <span class="comment">// ExtClassLoader      02</span></span><br><span class="line">        <span class="comment">// BootStrap (最顶层)   01  java.lang.String  rt.jar</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 双亲委派机制 可以保护java的核心类不会被自己定义的类所替代</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></div></li></ul></li></ol><ul><li><strong><em>双亲委派机制：</em></strong><ul><li>可以保护java的核心类不会被自己定义的类所替代</li><li>一层一层的让父类去加载，如果顶层的加载器不能加载，然后再向下类推<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Test01</span></span><br><span class="line">AppClassLoader       <span class="number">03</span> （自己写的所有类）</span><br><span class="line">ExtClassLoader       <span class="number">02</span>  （扩展加载器）</span><br><span class="line">BootStrap (最顶层)    <span class="number">01</span>  java.lang.String  rt.jar</span><br></pre></td></tr></table></figure></div><h1 id="Native方法"><a href="#Native方法" class="headerlink" title="Native方法"></a>Native方法</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2>java 真的可以开启线程吗？如果不能，那么java是怎么做到的呢？</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>分析Thread()的源码会发现一个native</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;<span class="comment">//源码</span></span><br></pre></td></tr></table></figure></div><p>native : 只要是带了这个关键字的，说明 java的作用范围达不到，只能去调用底层 C 语言的库！</p><p><strong>JNI ： Java Native Interface （Java 本地方法接口）</strong></p><h2 id="为什么会有-Native-这个东西？"><a href="#为什么会有-Native-这个东西？" class="headerlink" title="为什么会有 Native 这个东西？"></a>为什么会有 Native 这个东西？</h2><pre><code>1995年，java 必须可以去调用 c、c++的库，所以说Java就在内存中专门开辟了一块区域标记为 native 方法</code></pre><h1 id="程序计数器（每个线程都有一个私有的程序计数器）"><a href="#程序计数器（每个线程都有一个私有的程序计数器）" class="headerlink" title="程序计数器（每个线程都有一个私有的程序计数器）"></a>程序计数器（每个线程都有一个私有的程序计数器）</h1><p>分支、循环、跳转、异常处理！都需要依赖于程序计数器来完成！</p><ul><li><p>每个线程都有一个程序计数器，是线程私有的。</p></li><li><p>程序计数器就是一块十分小的内存空间；几乎可以不计</p></li><li><p>作用： 看做当前字节码执行的行号指示器</p></li><li><p>例子<br><a href="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdfoe7u852j30ll0ak3zr.jpg" data-fancybox="group" data-caption="图片" class="fancybox"><img alt="图片" title="图片" data-src="https://tvax2.sinaimg.cn/large/005DJQmOgy1gdfoe7u852j30ll0ak3zr.jpg" class="lazyload"></a></p><ul><li><p><code>bipush</code>  将 int、float、String、常量值推送值栈顶；</p></li><li><p><code>istore</code> 将一个数值从操作数栈存储到局部变量表；</p></li><li><p><code>iadd</code>  加</p></li><li><p><code>imul</code> 乘</p><h1 id="方法区（元空间）"><a href="#方法区（元空间）" class="headerlink" title="方法区（元空间）"></a>方法区（元空间）</h1><p>Method Area 方法区 是 Java虚拟机规范中定义的运行是数据区域之一，和堆（heap）一样可以在线程之间共享！</p><h2 id="JDK1-7之前"><a href="#JDK1-7之前" class="headerlink" title="JDK1.7之前"></a><strong>JDK1.7之前</strong></h2><p>永久代：用于存储一些虚拟机加载类信息，常量，字符串、静态变量等等。。。。这些东西都会放到永久代中；</p></li></ul></li></ul><p>永久代大小空间是有限的：如果满了 <code>OutOfMemoryError：PermGen</code></p><h2 id="JDK1-8之后"><a href="#JDK1-8之后" class="headerlink" title="JDK1.8之后"></a><strong>JDK1.8之后</strong></h2><p>彻底将永久代移除  HotSpot jvm ，Java Heap 中或者 Metaspcace（Native Heap）元空间；</p><p>元空间就是方法区在   HotSpot jvm  的实现；</p><p>方法区重要就是来存：类信息，常量，字符串、静态变量、符号引用、方法代码。。。。。。</p><p>元空间和永久代，都是对JVM规范中方法区的实现。</p><h3 id="元空间和永久代最大的区别："><a href="#元空间和永久代最大的区别：" class="headerlink" title="元空间和永久代最大的区别："></a>元空间和永久代最大的区别：</h3><p><strong>元空间并不在Java虚拟机中，使用的是本地内存！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://dakuzai.ml/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://dakuzai.ml/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Github Actions自动部署hexo</title>
    <link href="https://dakuzai.ml/2020/03/11/Github-Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/"/>
    <id>https://dakuzai.ml/2020/03/11/Github-Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hexo/</id>
    <published>2020-03-11T17:10:13.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h1><ul><li>一个配置在settings的<br><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gcq44ibdtbj30fk0cvdg7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gcq44ibdtbj30fk0cvdg7.jpg" class="lazyload"></a><br><a href="https://tva4.sinaimg.cn/large/005DJQmOgy1gcq46k23x9j30rr0cewf7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://tva4.sinaimg.cn/large/005DJQmOgy1gcq46k23x9j30rr0cewf7.jpg" class="lazyload"></a></li><li>另一个配置在仓库里面的settings，取名：HEXO_DELOY_KEY<br><a href="https://tva1.sinaimg.cn/large/005DJQmOgy1gcq4bujjfrj30rg070t8s.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://tva1.sinaimg.cn/large/005DJQmOgy1gcq4bujjfrj30rg070t8s.jpg" class="lazyload"></a><h1 id="在Actions中创建workflows工作流："><a href="#在Actions中创建workflows工作流：" class="headerlink" title="在Actions中创建workflows工作流："></a>在Actions中创建workflows工作流：</h1></li></ul><p><strong><em>我的代码模板，请自行修改</em></strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">name: 自动部署 Hexo</span><br><span class="line"></span><br><span class="line"># master branch on push, auto run</span><br><span class="line">on: </span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - backup</span><br><span class="line">      </span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [<span class="number">10</span>.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: 开始运行</span><br><span class="line">        uses: actions/checkout<span class="meta">@v</span>1</span><br><span class="line"></span><br><span class="line">      - name: 设置 Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">        uses: actions/setup-node<span class="meta">@v</span>1</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: 配置 Git 环境</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DELOY_KEY: $&#123;&#123;secrets.HEXO_DELOY_KEY&#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo <span class="string">"$HEXO_DELOY_KEY"</span> &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod <span class="number">600</span> ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name <span class="string">"你的用户名"</span></span><br><span class="line">          git config --global user.email <span class="string">"你的邮箱"</span></span><br><span class="line"></span><br><span class="line">      - name: 安装 Hexo CI</span><br><span class="line">        run: |</span><br><span class="line">          export TZ=<span class="string">'Asia/Shanghai'</span></span><br><span class="line">          npm i -g hexo-cli</span><br><span class="line">          npm i</span><br><span class="line"></span><br><span class="line">      - name: 安装插件</span><br><span class="line">        run: |</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: 部署博客</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean &amp;&amp; hexo g &amp;&amp; hexo douban &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Github" scheme="https://dakuzai.ml/categories/Github/"/>
    
      <category term="hexo" scheme="https://dakuzai.ml/categories/Github/hexo/"/>
    
    
      <category term="Github" scheme="https://dakuzai.ml/tags/Github/"/>
    
      <category term="hexo" scheme="https://dakuzai.ml/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo algolia 常见问题解决办法</title>
    <link href="https://dakuzai.ml/2020/03/10/hexo-algolia-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://dakuzai.ml/2020/03/10/hexo-algolia-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2020-03-10T20:33:09.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="报错-Please-set-an-HEXO-ALGOLIA-INDEXING-KEY-environment-variable-to-enable-content-indexing"><a href="#报错-Please-set-an-HEXO-ALGOLIA-INDEXING-KEY-environment-variable-to-enable-content-indexing" class="headerlink" title="报错: Please set an HEXO_ALGOLIA_INDEXING_KEY environment variable to enable content indexing."></a>报错: Please set an HEXO_ALGOLIA_INDEXING_KEY environment variable to enable content indexing.</h1><h3 id="1-原因"><a href="#1-原因" class="headerlink" title="1. 原因"></a>1. 原因</h3><p>需要将API密钥添加到系统环境变量(首先需要去algolia官网注册一个账号获取API密钥，此步教程较多，请自行咨询搜索引擎，可参考<a href="https://www.jianshu.com/p/fa2354d61e37" target="_blank" rel="noopener">hexo+next添加algolia教程</a>)</p><h3 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h3><ul><li>右键点击我的电脑 &gt; 属性 &gt; 高级系统设置 &gt; 环境变量<br><a href="https://tvax1.sinaimg.cn/large/005DJQmOgy1gcq0yj4m4ej30h20bmq3g.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://tvax1.sinaimg.cn/large/005DJQmOgy1gcq0yj4m4ej30h20bmq3g.jpg" class="lazyload"></a><br>在用户变量中点击新建，添加环境变量，变量名为HEXO_ALGOLIA_INDEXING_KEY 值为 Algolia admin key ， 添加后点击确认，重启电脑后新增的环境变量生效(添加到系统变量中也是可以的) ,具体的key可在下图获得</li><li><a href="https://tva3.sinaimg.cn/large/005DJQmOgy1gcq10w4qa1j30zs0haq3i.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://tva3.sinaimg.cn/large/005DJQmOgy1gcq10w4qa1j30zs0haq3i.jpg" class="lazyload"></a><h3 id="3-环境变量设置成功后，执行hexo-algolia-即可生成索引文件"><a href="#3-环境变量设置成功后，执行hexo-algolia-即可生成索引文件" class="headerlink" title="3.环境变量设置成功后，执行hexo algolia 即可生成索引文件"></a>3.环境变量设置成功后，执行hexo algolia 即可生成索引文件</h3></li></ul><p><strong><em>希望可以帮到你</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://dakuzai.ml/categories/hexo/"/>
    
      <category term="erro" scheme="https://dakuzai.ml/categories/hexo/erro/"/>
    
    
      <category term="hexo" scheme="https://dakuzai.ml/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题中添加相册功能</title>
    <link href="https://dakuzai.ml/2020/03/10/hexo%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
    <id>https://dakuzai.ml/2020/03/10/hexo%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/</id>
    <published>2020-03-10T20:32:46.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="新建一个页面"><a href="#新建一个页面" class="headerlink" title="新建一个页面"></a>新建一个页面</h1><blockquote><p>hexo new page “photo”</p></blockquote><ul><li>执行上面命令，会在source文件夹中生成photo文件夹，打开photo文件夹中的index.md文件，修改内容如下：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: photo</span><br><span class="line">date: <span class="number">2020</span>-<span class="number">03</span>-<span class="number">10</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">46</span></span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure></div></li></ul><h1 id="使用markdown语法填写照片，如下："><a href="#使用markdown语法填写照片，如下：" class="headerlink" title="使用markdown语法填写照片，如下："></a>使用markdown语法填写照片，如下：</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https:<span class="comment">//gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg)</span></span><br><span class="line">![](https:<span class="comment">//gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg)</span></span><br><span class="line">![](https:<span class="comment">//gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg)</span></span><br><span class="line">![](https:<span class="comment">//picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg)</span></span><br><span class="line">![](https:<span class="comment">//picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg)</span></span><br><span class="line">![](https:<span class="comment">//picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials_free_stock_photos_picjumbo_HNCK4919-2210x1474.jpg)</span></span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://dakuzai.ml/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://dakuzai.ml/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>给主题添加音乐</title>
    <link href="https://dakuzai.ml/2020/03/10/%E7%BB%99%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/"/>
    <id>https://dakuzai.ml/2020/03/10/%E7%BB%99%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/</id>
    <published>2020-03-10T09:43:54.000Z</published>
    <updated>2020-07-31T10:36:07.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="创建歌单页面"><a href="#创建歌单页面" class="headerlink" title="创建歌单页面"></a>创建歌单页面</h1><ol><li>新建页面<blockquote><p>hexo new page music</p></blockquote></li><li>这时候在 /Hexo/source 文件夹下会生成一个music文件夹，打开里面的index.md，修改如下：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 歌单</span><br><span class="line">date: <span class="number">2020</span>-<span class="number">03</span>-<span class="number">09</span> <span class="number">17</span>:<span class="number">53</span>:<span class="number">23</span></span><br><span class="line">type: <span class="string">"music"</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></div></li><li>打开主题的 _config.yml文件，在menu下新建一个名为music的类（注意这里使用的图标是图标库中的图标，网址为 <a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">http://www.fontawesome.com.cn/faicons/</a> 。可以选择自己喜欢的图标，我这里选择的是music）。完成后如下所示:<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  playlist: /playlist/ || music</span><br><span class="line">  about: /about/ || user</span><br></pre></td></tr></table></figure></div></li><li>打开/Hexo/themes/hexo-theme-next/languages/zh-Hans.yml，添加对应的中文翻译：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  music: 歌单</span><br></pre></td></tr></table></figure></div>至此，歌单创建完成<h1 id="使用-hexo-tag-aplayer-插件"><a href="#使用-hexo-tag-aplayer-插件" class="headerlink" title="使用 hexo-tag-aplayer 插件"></a>使用 hexo-tag-aplayer 插件</h1></li><li>hexo-tag-aplayer 是Aplayer在hexo上的插件，这里的配置参考的是<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">官方文档</a> ，第一步安装 hexo-tag-aplayer:<blockquote><p>npm install –save hexo-tag-aplayer</p></blockquote></li><li>最新版的 hexo-tag-aplayer 已经支持了MetingJS的使用，可以直接解析网络平台的歌曲（简直是神器），首先要在站点配置文件中开启meting模式，添加以下代码在配置文件的最后：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: <span class="keyword">true</span></span><br></pre></td></tr></table></figure></div></li><li>复制歌单的链接，然后复制歌单的id，例如 <a href="https://music.163.com/#/my/m/music/playlist?id=4900452897" target="_blank" rel="noopener">https://music.163.com/#/my/m/music/playlist?id=4900452897</a> ，这个歌单的id就是<strong>4900452897</strong>，公司名可以是tencent、netease或是其他公司，下面给出一个例子，打开 /Hexo/source/music/index.md文件，输入：<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;% meting <span class="string">"4900452897"</span> <span class="string">"netease"</span> <span class="string">"playlist"</span> <span class="string">"theme:#FF4081"</span> <span class="string">"mode:circulation"</span> <span class="string">"mutex:true"</span> <span class="string">"listmaxheight:340px"</span> <span class="string">"preload:auto"</span> %&#125;</span><br></pre></td></tr></table></figure></div></li><li>效果图如下</li></ol><p><a href="https://tvax4.sinaimg.cn/large/005DJQmOgy1gcomiz5dvnj30sp0dkab5.jpg%22%E6%95%88%E6%9E%9C%E5%9B%BE%22" data-fancybox="group" data-caption="效果图" class="fancybox"><img alt="效果图" title="效果图" data-src="https://tvax4.sinaimg.cn/large/005DJQmOgy1gcomiz5dvnj30sp0dkab5.jpg%22%E6%95%88%E6%9E%9C%E5%9B%BE%22" class="lazyload"></a><br>5. 完成，散会</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://dakuzai.ml/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://dakuzai.ml/tags/hexo/"/>
    
      <category term="Butterfly" scheme="https://dakuzai.ml/tags/Butterfly/"/>
    
  </entry>
  
</feed>
